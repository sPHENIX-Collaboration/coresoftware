       SUBROUTINE DKIA(IFAC,X,A,DKI,DKID,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC THE PURPOUSE OF THE ROUTINE IS THE CALCULATION OF THE 
CCCC MODIFIED BESSEL FUNCTIONS K_IA(X) AND K'_IA(X), 
CCCC WHERE I IS THE IMAGINARY UNIT AND X IS THE ARGUMENT OF THE
CCCC FUNCTIONS. WE WILL REFER TO A AS THE ORDER OF THE FUNCTIONS.  
CCCC
CCCC THE ROUTINE HAS THE OPTION OF COMPUTING SCALED FUNCTIONS.
CCCC THIS SCALING CAN BE USED TO ENLARGE THE RANGE OF 
CCCC COMPUTATION.
CCCC THE SCALED FUNCTIONS ARE DEFINED AS FOLLOWS
CCCC     (S STANDS FOR SCALED  AND 
CCCC      L=SQRT{X**2-A**2} + A*ARCSIN(A/X)):
CCCC                                              
CCCC                 EXP(L)*K_IA(X),            IF X >=ABS(A)
CCCC    SK_IA(X)  =                                     
CCCC                 EXP(ABS(A)*PI/2)*K_IA(X),  IF X < ABS(A)
CCCC                            
CCCC
CCCC                 EXP(L)*K'_IA(X),           IF X >=ABS(A)                  
CCCC    SK'_IA(X) =  
CCCC                 EXP(ABS(A)*PI/2)*K'_IA(X), IF X < ABS(A)
CCCC
CCCC THE RANGE OF THE PARAMETERS (X,A) FOR THE COMPUTATION OF
CCCC SCALED FUNCTIONS IS:
CCCC        0 < X <= 1500,  -1500 <= A <= 1500. 
CCCC FOR FUNCTIONS WITHOUT SCALING, THE RANGE IS USUALLY LARGER 
CCCC THAN
CCCC        0 < X <= 500,  -400 <= A <= 400,
CCCC DEPENDING ON THE MACHINE OVERFLOW/UNDERFLOW PARAMETERS, WHICH
CCCC ARE SET UP BY THE ROUTINE D1MACH.
CCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC              METHODS OF COMPUTATION:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC    1) SERIES,  IF  ABS(A) > 0.044*ABS(X-3.1)**1.9+(X-3.1)
CCCC    2) CONTINUED FRACTION,  
CCCC        IF X>3 AND ABS(A) < 380*(ABS((X-3)/2300))**0.572 
CCCC    3) AIRY-TYPE ASYMPTOTIC EXPANSION, 
CCCC        IF ABS(A) > 0.4*X+7.5 AND ABS(A) < 3.7*X-10
CCCC    4) QUADRATURES,
CCCC        IN THE REST OF CASES
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC        DESCRIPTION OF INPUT/OUTPUT VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC  INPUTS:
CCCC    X      : ARGUMENT OF THE FUNCTIONS 
CCC     A      : ORDER OF THE FUNCTIONS  
CCCC    IFAC   : INTEGER FLAG FOR THE SCALING
CCCC      * IF IFAC=1, THE CODE COMPUTES KIA(X), KIA'(X)
CCCC      * OTHERWISE, THE CODE COMPUTES SCALED KIA(X), KIA'(X)
CCCC  OUTPUTS
CCCC    DKI    :  KIA(X) FUNCTION
CCCC    DKID   :  DERIVATIVE OF THE KIA(X) FUNCTION        
CCCC    IERRO: ERROR FLAG
CCCC     * IF IERRO=0, COMPUTATION SUCCESSFUL.
CCCC     * IF IERRO=1, COMPUTATION OUT OF RANGE.
CCCC     * IF IERRO=2, VARIABLES X AND/OR A, OUT OF RANGE.
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC        ACCURACY:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
CCCC THE RELATIVE ACCURACY IS: 
CCCC  BETTER THAN 10**(-13)   FOR (X,A) IN (0,200]X[-200,200]; 
CCCC  BETTER THAN 5.10**(-13) FOR (X,A) IN (0,500]X[-500,500];
CCCC  CLOSE TO    10**(-12)   FOR (X,A) IN (0,1500]X[-1500,1500].
CCCC NEAR THE ZEROS OF THE FUNCTIONS (THERE ARE INFINITELY
CCCC MANY OF THEM IN THE OSCILLATORY REGION) RELATIVE PRECISION
CCCC LOOSES MEANING AND ONLY ABSOLUTE PRECISION MAKES SENSE.
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     AUTHORS:                                               
C        AMPARO GIL    (U. CANTABRIA, SANTANDER, SPAIN). 
C                      E-MAIL: AMPARO.GIL@UNICAN.ES
C        JAVIER SEGURA (U. CANTABRIA, SANTANDER, SPAIN).
C                      E-MAIL: SEGURAJJ@UNICAN.ES
C        NICO M. TEMME (CWI, AMSTERDAM, THE NETHERLANDS).
C                      E-MAIL: NICO.TEMME@CWI.NL
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    REFERENCES:
C     THIS IS THE COMPANION SOFTWARE OF THE ARTICLES
C      1)'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL DIFFERENTIAL
C         EQUATION FOR IMAGINARY ORDERS AND POSITIVE ARGUMENTS',
C         A. GIL, J. SEGURA, N.M. TEMME
C         ACM TRANS. MATH. SOFT. (2004)
C      2)'MODIFIED BESSEL FUNCTIONS OF IMAGINARY ORDER AND
C         POSITIVE ARGUMENT',
C         A. GIL, J. SEGURA, N.M. TEMME
C         ACM TRANS. MATH. SOFT. (2004)
C    ADDITIONAL REFERENCES:   
C     - 'COMPUTATION OF THE MODIFIED BESSEL FUNCTION OF THE
C         THIRD KIND FOR IMAGINARY ORDERS' 
C         A. GIL, J. SEGURA, N.M. TEMME
C         J. COMPUT. PHYS. 175 (2002) 398-411
C     - 'COMPUTATION OF THE MODIFIED BESSEL FUNCTIONS OF THE 
C         THIRD KIND OF IMAGINARY ORDERS:
C         UNIFORM AIRY-TYPE ASYMPTOTIC EXPANSION' 
C         A. GIL, J. SEGURA, N.M. TEMME, PROCEEDINGS OPSFA 2001  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C      D:    X-3.1
C      DF1:  0.044*ABS(D)**1.9+(X-3.1) 
C      DF2:  380*(ABS((X-3)/2300))**0.572
C      DF3:  0.4*X+7.5
C      DF4:  3.7*X-10
C      PNU:  ORDER OF THE FUNCTION 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION A,D,DF1,DF2,DF3,DF4,DKI,
     + DKID,PNU,X
       INTEGER IERRO,IFAC       
       IERRO=0
       PNU=A
       IF ((X.GT.1500.D0).OR.(X.LE.0.D0)) THEN
         IERRO=2
         DKI=0.D0
         DKID=0.D0
       ENDIF
       IF (ABS(PNU).GT.1500.D0) THEN
         IERRO=2
         DKI=0.D0
         DKID=0.D0
       ENDIF
       IF (IERRO.EQ.0) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC THESE FUNCTIONS ARE EVEN FUNCTIONS IN THE  C
CCC PARAMETER A (=PNU)                         C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
         IF (PNU.LT.0.D0) PNU=-PNU
         D=X-3.1D0
         DF1=0.044D0*ABS(D)**1.9D0+D
         DF2=380.D0*(ABS((X-3.D0)/2300.D0))**0.572D0
         DF3=0.4D0*X+7.5D0
         DF4=3.7D0*X-10.D0
         IF (PNU.GT.DF1) THEN
           CALL SERKIA(IFAC,X,PNU,DKI,DKID,IERRO)
         ELSEIF ((X.GT.3.D0).AND.(PNU.LT.DF2)) THEN
           CALL FRAKIA(IFAC,X,PNU,DKI,DKID,IERRO)
         ELSEIF ((PNU.GT.DF3).AND.(PNU.LT.DF4)) THEN          
           CALL AIEXKI(IFAC,X,PNU,DKI,DKID,IERRO)
         ELSE
           CALL DKINT(IFAC,X,PNU,DKI,DKID,IERRO)  
         ENDIF
       ENDIF
       RETURN
       END

       SUBROUTINE DKINT(IFAC,XX,PNUA,DKINF,DKIND,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  CALCULATION OF THE FUNCTIONS K,K' USING NON-OSCILLATING   C
CCC  INTEGRAL REPRESENTATIONS                                  C
CCC                                                            C
CCC  INPUTS:                                                   C
CCC      XX:   ARGUMENT OF THE FUNCTIONS                       C
CCC      PNUA: ORDER OF THE FUNCTIONS                          C
CCC      IFAC:                                                 C
CCC               =1,  NON SCALED FUNCTIONS                    C 
CCC               OTYHERWISE,  SCALED FUNCTIONS                C
CCC  OUTPUTS:                                                  C
CCC      DKINF: K FUNCTION                                     C
CCC      DKIND: DERIVATIVE OF THE K FUNCTION                   C
CCC      IERRO: ERROR FLAG                                     C
CCC      * IF IERRO=0, COMPUTATION SUCCESSFUL.                 C
CCC      * IF IERRO=1, COMPUTATION OUT OF RANGE.               C
CCC      * IF IERRO=2, ARGUMENT AND/OR ORDER,  OUT OF RANGE.   C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  METHOD OF COMPUTATION:
CCC  * IF XX>=PNUA, THE NON-OSCILLATING INTEGRAL REPRESENTATIONS
CCC                 FOR THE MONOTONIC REGION ARE USED
CCC  * IF XX<PNUA,  THE NON-OSCILLATING INTEGRAL REPRESENTATIONS
CCC                 FOR THE OSCILLATORY REGION ARE USED 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC    LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C CHI      : X*SINH(MU)-PNU*MU
C CONTR1   : CONTRIBUTION OF THE SEMI-INFINITE INTEGRAL
C            IN THE OSCILLATORY CASE (INCLUDING ADDITIONAL
C            FACTORS: CONTR1=FOS1*FACTORS).   
C COSCHI   : COS(CHI)
C COSH2M   : COSH(2*MU)
C COSHM    : COSH(MU)
C COSTH    : COS(THET), THET=ASIN(PNU/X)
C DF1      : FACTOR (DEPENDING ON IFAC)
C DMAIN    : PI*PNU*0.5
C DMU      : SOLUTION MU OF COSH(MU)=PNU/X
C DMU2     : 2*MU
C DMU3     : 3*MU
C DMU5     : 5*MU
C DMU7     : 7*MU
C DMU9     : 9*MU
C DMUFAC   : MU*COSH(MU)-SINH(MU)
C DMUTAN   : MU-TANH(MU)
C FDOMIN   : X*(COS(THET)+THET*SIN(THET))
C FOS1     : CONTRIBUTION OF THE SEMI-INFINITE INTEGRAL
C            IN THE OSCILLATORY CASE (KIA(X)).
C FOSD1    : CONTRIBUTION OF THE SEMI-INFINITE INTEGRAL
C            IN THE OSCILLATORY CASE (KIA'(X)). 
C HIR      : MONOTONIC CASE, CONTRIBUTION OF THE INTEGRAL
C            (KIA(X)).
C HIRD     : MONOTONIC CASE, CONTRIBUTION OF THE INTEGRAL
C            (KIA'(X)).
C PI       : 3.1415...
C PINU     : PI*PNU
C PNU      : ORDER OF THE FUNCTION
C SINCHI   : SIN(CHI)
C SINH2M   : SINH(2*MU)
C SINHM    : SINH(MU)
C SINTH    : SIN(THET)
C THET     : ASIN(PNU/X)
C UNDER    : UNDERFLOW NUMBER
C X        : ARGUMENT OF THE FUNCTION
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION CHI,CONTR1,COSCHI,COSH2M,COSHM,COSTH,
     + D1MACH,DF1,DKIND,DKINF,DMAIN,DMU,DMU2,DMU3,DMU5,DMU7,
     + DMU9,DMUFAC,DMUTAN,FDOMIN,FOS1,FOSD1,HIR,HIRD,PI,
     + PINU,PNU,PNUA,SINCHI,SINH2M,SINHM,SINTH,THET,UNDER,
     + X,XX
       INTEGER IERRO,IFAC
       COMMON/ARGU/X,PNU
       COMMON/PARMON/THET,SINTH,COSTH,FDOMIN
       COMMON/PAROS1/DMU,COSHM,SINHM,DMUFAC,COSCHI,SINCHI
       COMMON/PAROS2/COSH2M,SINH2M,DMAIN
       COMMON/PAROS3/DMUTAN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       X=XX
       PNU=PNUA
       IERRO=0
       IF (X.GE.PNU) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  MONOTONIC REGION   CC
CCCCCCCCCCCCCCCCCCCCCCCCCC
         SINTH=PNU/X
         THET=ASIN(SINTH)
         COSTH=COS(THET)
         FDOMIN=X*(COSTH+THET*SINTH)
         IF (IFAC.EQ.1) THEN
           IF (-FDOMIN.LE.LOG(UNDER)) IERRO=1
         ENDIF
         IF (IERRO.EQ.0) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC CALCULATION OF KIA:
CCC    CALL TO THE TRAPEZOIDAL ROUTINE  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC     
           CALL TRAPRE(1,HIR)
           IF (IFAC.EQ.1) THEN
             DKINF=0.5D0*HIR*EXP(-FDOMIN)
           ELSE
             DKINF=0.5D0*HIR
           ENDIF  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC CALCULATION OF KIA':
CCC    CALL TO THE TRAPEZOIDAL ROUTINE  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
           CALL TRAPRE(10,HIRD)
           IF (IFAC.EQ.1) THEN
             DKIND=-HIRD*EXP(-FDOMIN)
           ELSE
             DKIND=-HIRD
           ENDIF
         ELSE
           DKINF=0.D0
           DKIND=0.D0
         ENDIF
       ELSE
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  OSCILLATORY REGION   CC
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
         PI=ACOS(-1.D0)
         IF (IFAC.EQ.1) THEN
           IF ((-PI*PNU*0.5D0).LE.LOG(UNDER)) IERRO=1  
         ENDIF
         IF (IERRO.EQ.0) THEN
           COSHM=PNU/X
           DMU=LOG(COSHM+SQRT((COSHM-1.D0)*(COSHM+1.D0)))
           DMU2=2.D0*DMU
           COSH2M=COSH(DMU2)
           SINHM=SINH(DMU)
           SINH2M=SINH(DMU2)
           IF (DMU.GT.0.1D0) THEN
             CHI=X*SINHM-PNU*DMU
             DMUFAC=DMU*COSHM-SINHM
           ELSE
             DMU2=DMU*DMU
             DMU3=DMU2*DMU
             DMU5=DMU3*DMU2
             DMU7=DMU5*DMU2
             DMU9=DMU7*DMU2
             CHI=-2.D0*X*(1.D0/6.D0*DMU3+1.D0/60.D0*DMU5+
     +        3.D0/5040.D0*DMU7+4.D0/362880.D0*DMU9)
             DMUFAC=DMU3/3.D0+DMU5/30.D0+DMU7/840.D0+DMU9/45360.D0  
           ENDIF
           DMUTAN=DMU-TANH(DMU)
           COSCHI=COS(CHI)
           SINCHI=SIN(CHI)
           PINU=PI*PNU
           DMAIN=PINU*0.5D0
CCCCCCCCCCCCCCCCCC
CCC  INTEGRALS  CC
CCCCCCCCCCCCCCCCCC
           CALL TRAPRE(2,FOS1)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC THEN, THE KIA FUNCTION IS GIVEN BY ... CC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
           IF (IFAC.EQ.1) THEN
             DF1=EXP(-DMAIN)
             CONTR1=DF1*FOS1
           ELSE
             DF1=1.D0
             CONTR1=DF1*FOS1
           ENDIF
           DKINF=CONTR1
CCCCCCCCCCCCCCCCCCCCCCCCCC
CCC CALCULATION OF KIA' CC
CCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCC
CCC  INTEGRALS  CC
CCCCCCCCCCCCCCCCCC
           CALL TRAPRE(20,FOSD1)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC THEN, KIA' IS GIVEN BY ...
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
           IF (IFAC.EQ.1) THEN
             DF1=EXP(-DMAIN)
             CONTR1=DF1*FOSD1
           ELSE
             DF1=1.D0
             CONTR1=DF1*FOSD1
           ENDIF 
           DKIND=CONTR1
         ELSE
           DKINF=0.D0
           DKIND=0.D0
         ENDIF
       ENDIF
       RETURN
       END

       DOUBLE PRECISION FUNCTION FA(U)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  COMPUTATION OF THE INTEGRAND FOR THE 
CCC  INTEGRAL REPRESENTATION OF THE K FUNCTION 
CCC  IN THE MONOTONIC REGION. 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    U       : ARGUMENT OF THE FUNCTION 
C             (VARIABLE OF INTEGRATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    PHIR    : X*COSH(U)*COS(V(U))+PNU*V(U)
C              -FDOMIN, WHERE
C              V(U)=ASIN(U/SINH(U)*SIN(THET))
C              AND FDOMIN=X*(COS(THET)+
C                         THET*SIN(THET))
C    UNDER   : UNDERFLOW NUMBER
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION D1MACH,PHIR,U,UNDER
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8 
       IF ((-PHIR(U)).LE.LOG(UNDER)) THEN
         FA=0.D0
       ELSE
         FA=EXP(-PHIR(U))
       ENDIF
       RETURN
       END

       DOUBLE PRECISION FUNCTION FAD(T)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  COMPUTATION OF THE INTEGRAND FOR THE 
CCC  INTEGRAL REPRESENTATION OF THE DERIVATIVE OF
CCC  THE K FUNCTION IN THE MONOTONIC REGION. 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    T       : ARGUMENT OF THE FUNCTION 
C             (VARIABLE OF INTEGRATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C ANG      :  THET-V(U)
C ANGH     :  ANG/2
C COSTH    :  COS(THET)
C COSVU    :  COS(V(U))
C DFAC     :  COS(THET)+(FU1+2.D0*SIN(ANG/2)
C             *SIN(ANG/2))/COS(VU)
C DJACO    :  COSH(T)*EXP(S)/(1.D0+EXP(S))
C EXPO     :  EXP(-PHIR(U))
C FDOMIN   :  X*(COS(THET)+THET*SIN(THET))
C FU1      :  2*SINH(U/2)**2
C FUAC     :  U**3/6+U**5/120+U**7/5040 
C PHIR(U)  :  X*COSH(U)*COS(V(U))+PNU*V(U)-FDOMIN
C S        :  SINH(T)
C SINANH   :  SIN(ANG/2)
C SINHU    :  SINH(U)
C SINHUH   :  SINH(U/2)
C SINTH    :  SIN(THET)
C THET     :  ASIN(PNU/X)
C U        :  LOG(1+EXP(S))
C U2       :  U**2
C U3       :  U**3
C U5       :  U**5
C U7       :  U**7
C UH       :  U/2
C UNDER    :  UNDERFLOW NUMBER
C V(U)     :  ASIN(U/SINH(U)*SIN(THET))
C VU       :  V(U)
C Y        :  EXP(S)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION ANG,ANGH,COSTH,COSVU,D1MACH,
     + DFAC,DJACO,EXPO,FDOMIN,FU1,FUAC,PHIR,S,SINANH,
     + SINHU,SINHUH,SINTH,T,THET,U,U2,U3,U5,U7,UH,UNDER,
     + V,VU,Y
       COMMON/PARMON/THET,SINTH,COSTH,FDOMIN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       S=SINH(T)
       Y=EXP(S)
       U=LOG(1.D0+Y)
       DJACO=COSH(T)*Y/(1.D0+Y)
       IF (ABS(U).LT.1.D-1) THEN 
         IF (ABS(U).LT.UNDER) THEN
           DFAC=COSTH
         ELSE
           UH=U*0.5D0
           SINHUH=SINH(UH)
           FU1=2.D0*SINHUH*SINHUH
           U2=U*U
           U3=U2*U
           U5=U2*U3
           U7=U5*U2
           FUAC=U3/6.D0+U5/120.D0+U7/5040.D0 
           SINHU=SINH(U) 
           VU=V(U)
           COSVU=COS(VU)
           ANG=ASIN(-SINTH/(COSTH*U/SINHU+COSVU)*
     +        (SINHU+U)*FUAC/(SINHU*SINHU))  
           ANGH=0.5D0*ANG
           SINANH=SIN(ANGH)
           DFAC=COSTH+(FU1+2.D0*SINANH*SINANH)/COSVU
         ENDIF
       ELSE
         VU=V(U)
         ANG=THET-VU
         FU1=COSH(U)-1.D0
         ANGH=0.5D0*ANG
         SINANH=SIN(ANGH)
         DFAC=COSTH+(FU1+2.D0*SINANH*SINANH)/COS(VU)
       ENDIF 
       IF ((-PHIR(U)).LE.LOG(UNDER)) THEN
         EXPO=0.D0
       ELSE
         EXPO=EXP(-PHIR(U))
       ENDIF
       FAD=EXPO*DFAC*DJACO 
       RETURN
       END

       DOUBLE PRECISION FUNCTION FDTAU2(T)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  COMPUTATION OF THE INTEGRAND FOR THE 
CCC  INTEGRAL FOR THE DERIVATIVE OF THE K FUNCTION
CCC  IN EQ.(37) OF THE REFERENCE: 
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    T    : ARGUMENT OF THE FUNCTION 
C           (VARIABLE OF INTEGRATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC         LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C ARGU    : (COSH(MU)*U-DMUFAC)/SINH(U)
C ARGU2   : ARGU**2
C COSCHI  : COSH(CHI), CHI=X*SINH(MU)-PNU*MU
C COSH2M  : COSH(2*MU)
C COSHM   : COSH(MU)
C COSHU   : COSH(U)
C COSS    : COS(SIGMA(U))
C D1      : COSH(MU)-DMUFAC
C DELTA   : -SIN(CHI)*COS(SIGMA(U))*COSH(U)
C           +COS(CHI)*SIN(SIGMA(U))*SINH(U)
C DERI    : (COSH(MU)/SINH(U)-D1*COSH(U)/SINH(U)**2)
C           /SQRT(1-ARGU2)
C DJACO   : COSH(T)*EXP(S)/SQRT(1+EXP(S)**2)
C DMAIN   : PI*PNU*0.5
C DMU     : SOLUTION MU OF COSH(MU)=PNU/X
C DMU2    : 2*MU
C DMUFAC  : MU*COSH(MU)-SINH(MU)
C EXPON   : EXP(-(PHIB(U)-PI*PNU*0.5))
C F1      : SINH(U-MU)/(U-MU)
C G1      : Z/6+Z3/120+Z5/5040+Z7/362880, Z=2*Y
C GAMMA   : SIN(CHI)*SIN(SIGMA(U))*SINH(U)+
C           COS(CHI)*COS(SIGMA(U))*COSH(U)
C PHIB(U) : X*COSH(U)*COS(SIGMA(U))+PNU*SIGMA(U), 
C           WHERE X=ARGUMENT OF THE FUNCTION,
C           SIGMA(U)=ARCSIN((COSH(MU)*U-DMUFAC)/SINH(U)
C RESTO   : -SIN(CHI)*COS(SIGMA(U))*COSH(U)
C           +COS(CHI)*SIN(SIGMA(U))*SINH(U)+
C           (SIN(CHI)*SIN(SIGMA(U))*SINH(U)+
C            COS(CHI)*COS(SIGMA(U))*COSH(U))*DERI
C S       : SINH(T)
C SIGMA(U): ASIN((COSH(MU)*U-DMUFAC)/SINH(U))  
C SIGMAU  : SIGMA(U)
C SINCHI  : SIN(CHI)
C SINH2M  : SINH(2*MU)
C SINHM   : SINH(MU)
C SINHU   : SINH(U)
C SINHU2  : 2*SINH(U)
C SINS    : SIN(SIGMA(U))
C U       : MU+LOG(X+SQRT(X**2+1))
C UNDER   : UNDERFLOW NUMBER
C X       : EXP(S)
C Y       : U-MU
C Z       : 2*Y
C Z2      : Z**2
C Z3      : Z**3
C Z5      : Z**5
C Z7      : Z**7
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION ARGU,ARGU2,COSCHI,COSH2M,COSHM,
     + COSHU,COSS,D1,D1MACH,DELTA,DERI,DJACO,DMAIN,DMU,
     + DMU2,DMUFAC,DMUTAN,EXPON,F1,G1,GAMMA,PHIB,RESTO,  
     + S,SIGMA,SIGMAU,SINCHI,SINH2M,SINHM,SINHU,SINHU2,
     + SINS,T,U,UNDER,X,Y,Z,Z2,Z3,Z5,Z7
       COMMON/PAROS1/DMU,COSHM,SINHM,DMUFAC,COSCHI,SINCHI
       COMMON/PAROS2/COSH2M,SINH2M,DMAIN
       COMMON/PAROS3/DMUTAN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8 
       S=SINH(T)
       X=EXP(S)
       U=DMUTAN+LOG(X+SQRT(X*X+1.D0))    
       Y=U-DMU
       COSHU=COSH(U)
       SINHU=SINH(U)
       IF (ABS(Y).LE.1.D-1) THEN
         IF (ABS(Y).GT.UNDER) THEN
           F1=SINH(Y)/Y
         ELSE
           F1=1.D0
         ENDIF                 
         Z=Y*2.D0
         Z2=Z*Z
         Z3=Z2*Z
         Z5=Z3*Z2
         Z7=Z5*Z2
         G1=Z/6.D0+Z3/120.D0+Z5/5040.D0+Z7/362880.D0
         DMU2=2.D0*DMU 
         DERI=SINHU/(F1-COSHM*COSHU)*SQRT(COSH(DMU2)*F1*F1+
     +   2.D0*SINH(DMU2)*G1-COSHM*COSHM)       
         DERI=1.D0/DERI
       ELSE
         D1=COSHM*U-DMUFAC
         ARGU=D1/SINHU
         ARGU2=ARGU*ARGU
         SINHU2=SINHU*SINHU
         DERI=1.D0/SQRT(1.D0-ARGU2)*(COSHM/SINHU-
     +   D1*COSHU/SINHU2)
         IF (U.LT.DMU) DERI=-DERI 
       ENDIF
       DJACO=COSH(T)*X/SQRT(1.D0+X*X)
       IF ((-(PHIB(U)-DMAIN)).LE.LOG(UNDER)) THEN
         EXPON=0.D0
         FDTAU2=0.D0
       ELSE 
         EXPON=EXP(-(PHIB(U)-DMAIN))
         SIGMAU=SIGMA(U)
         SINS=SIN(SIGMAU)
         COSS=COS(SIGMAU)
         GAMMA=COSCHI*SINS*SINHU-SINCHI*COSS*COSHU
         DELTA=-COSCHI*COSS*COSHU-SINCHI*SINS*SINHU
         RESTO=DELTA+GAMMA*DERI
         FDTAU2=EXPON*RESTO*DJACO
       ENDIF
       RETURN
       END

       DOUBLE PRECISION FUNCTION FSTAU2(T)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  COMPUTATION OF THE INTEGRAND FOR THE 
CCC  INTEGRAL FOR THE K FUNCTION IN EQ.(37) OF 
CCC  THE REFERENCE: 
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    T    : ARGUMENT OF THE FUNCTION 
C           (VARIABLE OF INTEGRATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C ARGU    : (COSH(MU)*U-DMUFAC)/SINH(U)
C ARGU2   : ARGU**2
C COSCHI  : COSH(CHI), CHI=X*SINH(MU)-PNU*MU
C COSH2M  : COSH(2*MU)
C COSHM   : COSH(MU)
C D1      : COSH(MU)-DMUFAC
C DERI    : (COSH(MU)/SINH(U)-D1*COSH(U)/SINH(U)**2)
C           /SQRT(1-ARGU2)
C DJACO   : COSH(T)*EXP(S)/SQRT(1+EXP(S)**2)
C DMAIN   : PI*PNU*0.5
C DMU     : SOLUTION MU OF COSH(MU)=PNU/X
C DMU2    : 2*MU
C DMUFAC  : MU*COSH(MU)-SINH(MU)
C EXPON   : EXP(-(PHIB(U)-PI*PNU*0.5))
C F1      : SINH(U-MU)/(U-MU)
C G1      : Z/6+Z3/120+Z5/5040+Z7/362880, Z=2*Y
C PHIB(U) : X*COSH(U)*COS(SIGMA(U))+PNU*SIGMA(U), 
C           WHERE X=ARGUMENT OF THE FUNCTION,
C           SIGMA(U)=ARCSIN((COSH(MU)*U-DMUFAC)/SINH(U)
C RESTO   : COS(CHI)+SIN(CHI)*DERI
C S       : SINH(T)
C SINCHI  : SIN(CHI)
C SINH2M  : SINH(2*MU)
C SINHM   : SINH(MU)
C SINHU   : SINH(U)
C SINHU2  : 2*SINH(U)
C U       : MU+LOG(X+SQRT(X**2+1))
C UNDER   : UNDERFLOW NUMBER
C X       : EXP(S)
C Y       : U-MU
C Z       : 2*Y
C Z2      : Z**2
C Z3      : Z**3
C Z5      : Z**5
C Z7      : Z**7
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION ARGU,ARGU2,COSCHI,COSH2M,
     + COSHM,D1,D1MACH,DERI,DJACO,DMAIN,DMU,DMU2,
     + DMUFAC,DMUTAN,EXPON,F1,G1,PHIB,RESTO,S,SINCHI,
     + SINH2M,SINHM,SINHU,SINHU2,T,U,UNDER,X,Y,Z,Z2,
     + Z3,Z5,Z7                           
       COMMON/PAROS1/DMU,COSHM,SINHM,DMUFAC,COSCHI,SINCHI
       COMMON/PAROS2/COSH2M,SINH2M,DMAIN
       COMMON/PAROS3/DMUTAN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       S=SINH(T)
       X=EXP(S)
       U=DMUTAN+LOG(X+SQRT(X*X+1.D0))    
       Y=U-DMU
       IF (ABS(Y).GT.UNDER) THEN
         F1=SINH(Y)/Y
       ELSE
         F1=1.D0
       ENDIF    
       Z=Y*2.D0
       Z2=Z*Z
       IF (ABS(Y).LE.0.1D0) THEN
         Z3=Z2*Z
         Z5=Z3*Z2
         Z7=Z5*Z2
         G1=Z/6.D0+Z3/120.D0+Z5/5040.D0+Z7/362880.D0
         DMU2=2.D0*DMU
         DERI=SINH(U)/(F1-COSHM*COSH(U))*
     +      SQRT(COSH(DMU2)*F1*F1+2.D0*SINH(DMU2)*G1-
     +      COSHM*COSHM)
         DERI=1.D0/DERI 
       ELSE         
         D1=COSHM*U-DMUFAC
         SINHU=SINH(U)
         ARGU=D1/SINHU
         ARGU2=ARGU*ARGU
         SINHU2=SINHU*SINHU
         DERI=1.D0/SQRT(1.D0-ARGU2)*
     +    (COSHM/SINHU-D1*COSH(U)/SINHU2)
         IF (U.LT.DMU) DERI=-DERI
       ENDIF
       DJACO=COSH(T)*X/SQRT(1.D0+X*X)
       IF ((-(PHIB(U)-DMAIN)).LE.LOG(UNDER)) THEN
         EXPON=0.D0
         FSTAU2=0.D0
       ELSE
         EXPON=EXP(-(PHIB(U)-DMAIN))
         RESTO=(COSCHI+SINCHI*DERI)
         FSTAU2=EXPON*RESTO*DJACO
       ENDIF
       RETURN
       END

       SUBROUTINE TRAPRE(IC,TI)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC IMPLEMENTATION OF AN ADAPTIVE TRAPEZOIDAL RULE
CCC FOR COMPUTING THE INTEGRAL REPRESENTATIONS OF
CCC THE FUNCTIONS, FOR THE DIFFERENT REGIONS
CCC (MONOTONIC OR OSCILLATORY).
CCC
CCC   INPUT VARIABLE:
CCC      IC: DEPENDING ON THE VALUES OF IC, 
CCC          DIFFERENT INTEGRALS ARE COMPUTED:
CCC          *IC=1, K FUNCTION, MONOTONIC REGION 
CCC          *IC=2, K FUNCTION, OSCILLATORY REGION 
CCC          *IC=10, DERIVATIVE OF THE K FUNCTION,
CCC                  MONOTONIC REGION.
CCC          *IC=20, DERIVATIVE OF THE K FUNCTION,
CCC                  OSCILLATORY REGION.
CCC   OUTPUT VARIABLE:
CCC          TI,  RESULT OF THE INTEGRAL
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC            LOCAL VARIABLES
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A        :  LOWER INTEGRATION LIMIT
C B        :  UPPER INTEGRATION LIMIT
C DELTA    :  CALCULATES THE RELATIVE PRECISION
C EPS      :  RELATIVE PRECISION PARAMETER USED IN 
C             THE CALCULATION
C H        :  INTEGRATION STEP
C PNU      :  ORDER OF THE FUNCTION
C SUM      :  ACCUMULATES THE ELEMENTARY 
C             CONTRIBUTIONS
C TIN      :  EVALUATED INTEGRAL
C X        :  ARGUMENT   
C XAC      :  INTEGRATION ABCISSA
C Z        :  X/PNU
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION A,B,D1MACH,DELTA,EPS,FINTE,H,
     + PNU,SUM,TI,TIN,X,XAC,Z
       INTEGER I,IC,IFI,N
       COMMON/ARGU/X,PNU
       EPS=D1MACH(3)
       IF (EPS.LT.1.D-14) EPS=1.D-14
       N=0
CCCCC   INTEGRATION LIMITS: A,B
       Z=X/PNU       
       IF ((Z.GT.0.999D0).AND.(Z.LT.1.001D0)) THEN
         IF ((IC.EQ.1).OR.(IC.EQ.10)) THEN         
           A=-3.5D0
         ELSE
           A=-4.5D0
         ENDIF
       ELSE
         IF ((IC.EQ.2).OR.(IC.EQ.20)) THEN         
           A=-2.5D0
         ELSE
           A=-4.5D0
         ENDIF
       ENDIF       
       B=-A
       H=B-A    
       TI=0.5D0*H*(FINTE(IC,A)+FINTE(IC,B))
       DELTA=1.D0+EPS
11     N=N+1
       H=0.5D0*H
       IF (N.EQ.1) THEN
         IFI=1
       ELSE
         IFI=2*IFI
       ENDIF
       SUM=0.D0
       DO 3 I=1,IFI
         XAC=A+DBLE(2*I-1)*H
         SUM=SUM+FINTE(IC,XAC)
 3     CONTINUE
       TIN=0.5D0*TI+H*SUM
       IF ((TIN.NE.0.D0).AND.(N.GT.4)) THEN
         DELTA=ABS(1.D0-TI/TIN)
       ENDIF
       TI=TIN
       IF ((DELTA.GT.EPS).AND.(N.LT.9)) GOTO 11
       RETURN
       END
          
       DOUBLE PRECISION FUNCTION FINTE(IC,T)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  AUXILIARY FUNCTION FOR THE SUBROUTINE TRAPRE.    
CCC  THIS FUNCTION CALLS THE DIFFERENT FUNCTIONS
CCC  CONTAINING THE INTEGRANDS WHICH ARE INTEGRATED
CCC  BY TRAPRE.  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   INPUT:                                      C
CCC      IC: INTEGER PARAMETER. ITS ADMISSIBLE    C
CCC          VALUES ARE THE SAME AS IN THE        C
CCC          SUBROUTINE TRAPRE.                   C  
CCC      T:  INTEGRATION ABSCISSA                 C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC       LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
C  FA      : MONOTONIC PART CONTRIBUTION 
C            (KIA(X) FUNCTION).
C  FAD     : MONOTONIC PART CONTRIBUTION
C            (KIA'(X) FUNCTION).
C  FDTAU2  : OSCILLATORY PART: TAU CONTRIBUTION ROUTINE
C            (KIA'(X) FUNCTION). SEMI-INFINITE INTEGRAL.
C                USED FOR LARGE PNU
C  FSTAU2  : OSCILLATORY PART: TAU CONTRIBUTION ROUTINE
C            (KIA(X) FUNCTION). SEMI-INFINITE INTEGRAL.
C                  USED FOR LARGE PNU
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION FA,FAD,FDTAU2,FSTAU2,T
       INTEGER IC
       IF (IC.EQ.1) THEN
         FINTE=FA(T)
       ENDIF 
       IF (IC.EQ.2) THEN
         FINTE=FSTAU2(T)
       ENDIF 
       IF (IC.EQ.10) THEN
         FINTE=FAD(T)
       ENDIF 
       IF (IC.EQ.20) THEN
         FINTE=FDTAU2(T)
       ENDIF 
       END    
 
       SUBROUTINE FRAKIA(IFAC,X,PNU,PSER,PSERD,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   IMPLEMENTATION OF THE CONTINUED FRACTION     C
CCC   METHOD FOR THE CALCULATION OF K AND K'       C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   INPUT VARIABLES:                             C
CCC      X:   ARGUMENT OF THE FUNCTIONS            C
CCC      PNU: ORDER OF THE FUNCTIONS               C
CCC      IFAC:                                     C
CCC               =1,  NON SCALED FUNCTIONS        C 
CCC               OTHERWISE,  SCALED FUNCTIONS     C
CCC   OUTPUT VARIABLES:                            C
CCC      PSER: K FUNCTION                          C
CCC      PSERD: DERIVATIVE OF THE K FUNCTION       C
CCC      IERRO: ERROR FLAG                         C
CCC      * IF IERRO=0, COMPUTATION SUCCESSFUL.     C
CCC      * IF IERRO=1, COMPUTATION OUT OF RANGE.   C
CCC      * IF IERRO=2, ARGUMENT AND/OR ORDER,      C
CCC                    OUT OF RANGE.               C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC           LOCAL VARIABLES:                     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A      : (PNU), ORDER OF THE FUNCTIONS
C A2     : A**2
C AA     : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C AB     : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C B      : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C CC     : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C COSTH  : COS(THET)
C D      : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C DELS   : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C DELTA  : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C FC     : CONTINUED FRACTION FOR K(PNU+1)/K(PNU)
C FDOMIN : X*(COS(THET)+THET*SIN(THET))
C K      : KIA FUNCTION
C KP     : KIA' FUNCTION
C PI     : 3.1415..
C PIA    : PI*PNU
C PISQ   : SQRT(PI)
C PRECI  : RELATIVE PRECISION USED IN THE CALCULATION
C Q0B    : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C Q1B    : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C QB     : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C QQB    : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C S      : AUXILIARY VARIABLE IN THE IMPLEMENTATION
C          OF THE LENZ-THOMPSON ALGORITHM
C SINTH  : SIN(THET)
C THET   : ASIN(PNU/X)
C UNDER  : UNDERFLOW NUMBER
C Z0     : 1/(1+S)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION A,A2,AA,AB,B,CC,COSTH,D,D1MACH,
     + DELS,DELTA,FC,FDOMIN,K,KP,PI,PIA,PISQ,PNU,PRECI,
     + PSER,PSERD,Q0B,Q1B,QB,QQB,S,SINTH,THET,UNDER,X,Z0
       INTEGER IERRO,IFAC,MM
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       PI=ACOS(-1.D0)
       IERRO=0
       IF (IFAC.EQ.1) THEN
         IF (X.GE.PNU) THEN
           SINTH=PNU/X
           THET=ASIN(SINTH)
           COSTH=COS(THET)
           FDOMIN=X*(COSTH+THET*SINTH)
           IF (-FDOMIN.LE.LOG(UNDER)) IERRO=1
         ELSE        
           IF ((-PI*PNU*0.5D0).LE.LOG(UNDER)) IERRO=1  
         ENDIF
       ENDIF
       IF (IERRO.EQ.0) THEN
         PRECI=D1MACH(3)*10
         A=PNU
         A2=A*A
         PISQ=PI**0.5D0
CCC CF FOR K(NU+1)/K(NU)
         MM=2
         AB=-(0.25D0+A2)
         AA=AB
         CC=-AB
         Q0B=0.D0
         Q1B=1.D0
         QQB=CC
         B=2.D0*(1.D0+X)
         D=1.D0/B
         DELTA=D
         FC=DELTA
         S=QQB*DELTA
         AB=-2.D0+AB
         B=B+2.D0
 91      D=1.D0/(B+AB*D)
         DELTA=(B*D-1.D0)*DELTA
         FC=FC+DELTA
         CC=-AB*CC/MM
         QB=(Q0B-(B-2.D0)*Q1B)/AB
         Q0B=Q1B
         Q1B=QB
         QQB=QQB+CC*Q1B
         DELS=QQB*DELTA
         S=S+DELS
         B=B+2.D0
         AB=-2.D0*MM+AB
         MM=MM+1     
         IF (MM.LT.10000) THEN
           IF (ABS(DELS/S).GT.PRECI) GOTO 91
         ENDIF              
         Z0=1.D0/(1.D0+S)
         IF (IFAC.EQ.1) THEN
           K=PISQ*(2.D0*X)**(-0.5D0)*EXP(-X)*Z0
           KP=-K/X*(0.5D0+X-(A2+0.25D0)*FC)
         ELSE
           IF (X.LT.A) THEN
             PIA=PI*A
             K=PISQ*(2.D0*X)**(-0.5D0)*EXP(-X+PIA*0.5D0)*Z0
             KP=-K/X*(0.5D0+X-(A2+0.25D0)*FC)
           ELSE
             SINTH=A/X
             THET=ASIN(SINTH)
             COSTH=COS(THET)
             FDOMIN=X*(COSTH+THET*SINTH)
             K=PISQ*(2.D0*X)**(-0.5D0)*EXP(-X+FDOMIN)*Z0
             KP=-K/X*(0.5D0+X-(A2+0.25D0)*FC)
           ENDIF
         ENDIF
         PSER=K
         PSERD=KP
       ELSE
         PSER=0.D0
         PSERD=0.D0
       ENDIF
       RETURN
       END     
   
       SUBROUTINE SERKIA(IFAC,X,PNU,PSER,PSERD,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   CALCULATION OF POWER SERIES FOR K, K'  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   INPUT VARIABLES:                              C
CCC      X:   ARGUMENT OF THE FUNCTIONS             C
CCC      PNU: ORDER OF THE FUNCTIONS                C
CCC      IFAC:                                      C
CCC               =1,  NON SCALED FUNCTIONS         C 
CCC               OTHERWISE,  SCALED FUNCTIONS      C
CCC   OUTPUT VARIABLES:                             C
CCC      PSER: K FUNCTION                           C
CCC      PSERD: DERIVATIVE OF THE K FUNCTION        C
CCC      IERRO: ERROR FLAG                          C
CCC      * IF IERRO=0, COMPUTATION SUCCESSFUL.      C
CCC      * IF IERRO=1, COMPUTATION OUT OF RANGE.    C
CCC      * IF IERRO=2, ARGUMENT AND/OR ORDER,       C
CCC                    OUT OF RANGE.                C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC         LOCAL VARIABLES:                        C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A       : (PNU) ORDER OF THE FUNCTIONS
C A2      : A**2
C A2H     : A**2/2
C A2N     : A**(2*N)
C ACCP    : ACCUMULATES THE P COEFFICIENTS
C ACCQ    : ACCUMULATES THE Q COEFFICIENTS
C ARGU    : SIG(0)-A*LOG(X/2)
C C       : X**(2*K)/K!
C COCI    : 1/(K**2+A**2)
C COSTH   : COS(THET)
C DELTAK  : ACCUMULATES THE CONTRIBUTION FOR THE
C           KIA(X) FUNCTION
C DELTKP  : ACCUMULATES THE CONTRIBUTION FOR THE
C           KIA'(X) FUNCTION
C DF1     : FACTOR (DEPENDING ON IFAC)
C ETA0    : PARAMETER FOR THE CALCULATION OF THE 
C           COULOMB PHASE SHIFT
C ETA02   : ETA0**2
C F(K)    : SIN(PHI(A,K)-A*LOG(X/2))
C           /(A**2*(1+A**2)...(K**2+A**2))**1/2,
C           WHERE PHI(A,K)=PHASE(GAMMA(1+K+IA))
C FDOMIN  : X*(COS(THET)+THET*SIN(THET)) 
C K       : CONTRIBUTION TO THE KIA(X) FUNCTION
C KP      : CONTRIBUTION TO THE KIA'(X) FUNCTION
C OVER    : OVERFLOW NUMBER
C P0      : PARAMETERS FOR THE CALCULATION OF THE COULOMB
C           PHASE SHIFT
C P1      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C P2      : PARAMETERS FOR THE CALCULATION OF THE COULOMB
C           PHASE SHIFT
C PI      : 3.1415...
C PIA     : PI*A
C PIA2    : 2*PI*A
C PRECI   : RELATIVE PRECISION USED IN THE CALCULATION
C Q0      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C Q1      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C Q2      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C R(K)    : F(K)*A/TAN(PHI(A,K)-A*LOG(X/2))  
C SIG0    : COULOMB PHASE SHIFT
C SINTH   : SIN(THET)
C THET    : ASIN(A/X)
C UNDER   : UNDERFLOW NUMBER
C X2      : X*X
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC             
       DOUBLE PRECISION A,A2,A2N,ACCP,ACCQ,ARGU,C,COCI,COSTH,
     + D1MACH,DDS,DEE,DELTAK,DELTKP,DF1,DSMALL,ETA0,ETA02,
     + EULER,F(0:500),FDOMIN,K,KP,OVER,P0(0:9),P1(0:9),P2(0:6),
     + PI,PIA,PIA2,PNU,PRECI,PSER,PSERD,Q0(0:9),Q1(0:9),Q2(0:6),
     + R(0:500),SIG0,SINTH,THET,UNDER,X,X2
       INTEGER IERRO,IFAC,L,M,N
       SAVE P0,Q0,P1,Q1,P2,Q2
       DATA P0/1.08871504904797411683D5,3.64707573081160914640D5,
     +        4.88801471582878013158D5,3.36275736298197324009D5,
     +        1.26899226277838479804D5,
     +        2.60795543527084582682D4,2.73352480554497990544D3,
     +        1.26447543569902963184D2,
     +        1.85446022125533909390D0,1.90716219990037648146D-3/
       DATA Q0/6.14884786346071135090D5,2.29801588515708014282D6,
     +        3.50310844128424021934D6,
     +        2.81194990286041080264D6,1.28236441994358406742D6,
     +        3.35209348711803753154D5,
     +        4.84319580247948701171D4,3.54877039006873206531D3,
     +        1.11207201299804390166D2,1.D0/
       DATA P1/-1.044100987526487618670D10,-1.508574107180079913696D10,
     +        -5.582652833355901160542D9,4.052529174369477275446D8,
     +         5.461712273118594275192D8, 
     +         9.510404403068169395714D7,6.281126609997342119416D6,
     +         1.651178048950518520416D5, 
     +         1.498824421329341285521D3,2.974686506595477984776D0/
       DATA Q1/1.808868161493543887787D10,3.869142051704700267785D10,
     +        3.003264575147162634046D10,1.075554651494601843525D10,
     +        1.901298501823290694245D9,
     +        1.665999832151229472632D8,6.952188089169487375936D6,
     +        1.253235080625688652718D5,7.904420414560291396996D2,1.D0/
       DATA P2/7.08638611024520906826D-3,-6.54026368947801591128D-2,
     +         2.92684143106158043933D-1,4.66821392319665609167D0,
     +        -3.43943790382690949054D0,
     +        -7.72786486869252994370D0,-9.88841771200290647461D-01/
       DATA Q2/-7.08638611024520908189D-3,6.59931690706339630254D-2,
     +        -2.98754421632058618922D-1,-4.63752355513412248006D0,
     +        3.79700454098863541593D0,7.06184065426336718524D0,1.D0/
       PI=ACOS(-1.D0)
       ETA0=1.8055470716051069198764D0  
       EULER=0.577215664901532860606512D0
       PRECI=D1MACH(3)*10
CCC MACHINE DEPENDENT CONSTANT (OVERFLOW NUMBER)
       OVER=D1MACH(2)*1.D-8
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       IERRO=0
       IF (IFAC.EQ.1) THEN
         IF (X.GE.PNU) THEN
           SINTH=PNU/X
           THET=ASIN(SINTH)
           COSTH=COS(THET)
           FDOMIN=X*(COSTH+THET*SINTH)
           IF (-FDOMIN.LE.LOG(UNDER)) IERRO=1
         ELSE        
           IF ((-PI*PNU*0.5D0).LE.LOG(UNDER)) IERRO=1  
         ENDIF
       ENDIF
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC COEFFICIENTS FOR THE CALCULATION OF THE COULOMB PHASE SHIFT
CCC FROM CODY & HILLSTROM, MATH. COMPUT. 24(111) 1970
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       IF (IERRO.EQ.0) THEN
         A=PNU
         ETA02=ETA0*ETA0
         A2=A*A
         N=0
         ACCP=0.D0
         ACCQ=0.D0
         IF (A.LE.2.D0) THEN
 33        A2N=A2**N
           ACCP=ACCP+P0(N)*A2N
           ACCQ=ACCQ+Q0(N)*A2N
           N=N+1
           IF (N.LE.9) GOTO 33 
           SIG0=A*(A2-ETA02)*ACCP/ACCQ
         ELSE
           IF ((A.GT.2.D0).AND.(A.LE.4.D0)) THEN
 44          A2N=A2**N
             ACCP=ACCP+P1(N)*A2N
             ACCQ=ACCQ+Q1(N)*A2N
             N=N+1
             IF (N.LE.9) GOTO 44
             SIG0=A*ACCP/ACCQ
           ELSE
 55          A2N=A2**N
             ACCP=ACCP+P2(N)/A2N
             ACCQ=ACCQ+Q2(N)/A2N
             N=N+1
             IF (N.LE.6) GOTO 55
             SIG0=ATAN(A)*0.5D0+A*(LOG(1.D0+A2)*0.5D0+ACCP/ACCQ)
           ENDIF
         ENDIF 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC EVALUATION OF F(0), R(0), R(1)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
         PIA=PI*A                                       
         ARGU=SIG0-A*LOG(X*0.5D0)                  
         R(0)=COS(ARGU)                       
         R(1)=1.D0/(1.D0+A2)*(R(0)-A*SIN(ARGU))
         IF (A.LT.UNDER) THEN
           F(0)=-(EULER+LOG(X*0.5D0))
         ELSE            
           F(0)=1.D0/A*SIN(ARGU)                                      
         ENDIF
         C=1.D0
         K=F(0)                  
         KP=-0.5D0*R(0)                        
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC RECURSION FOR F(K), R(K), C(K)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         X2=0.25D0*X*X
         M=1
         COCI=1.D0/(M*M+A2)          
         DELTAK=K*10
         DELTKP=KP*10      
 66      F(M)=(M*F(M-1)+R(M-1))*COCI
         C=X2*C/M
         DELTAK=F(M)*C
         K=K+DELTAK
         DELTKP=(M*F(M)-0.5D0*R(M))*C
         KP=KP+DELTKP
         M=M+1  
         COCI=1.D0/(M*M+A2)
         R(M)=((2.D0*M-1.D0)*R(M-1)-R(M-2))*COCI
         IF (K.GT.OVER) M=500
         IF (KP.GT.OVER) M=500
         IF (M.LT.500) THEN
           IF ((ABS(DELTAK/K).GT.PRECI).OR.
     +       (ABS(DELTKP/KP).GT.PRECI)) GOTO 66
         ENDIF
         PIA2=2.D0*PIA
         IF (IFAC.EQ.1) THEN  
           IF (-PIA2.LE.LOG(UNDER)) THEN
             DEE=0.D0
           ELSE
             DEE=EXP(-PIA2)
           ENDIF   
           IF (A.LT.1.D-1) THEN
             IF (A.LT.UNDER) THEN
               DF1=1.D0
             ELSE
               L=0
               DDS=1.D0
               DSMALL=1.D0             
 47            L=L+1
               DDS=-DDS*PIA2/(L+1.D0)
               DSMALL=DSMALL+DDS
               IF (ABS(DDS/DSMALL).GT.PRECI) GOTO 47 
               DF1=EXP(PIA*0.5D0)*SQRT(DSMALL)
             ENDIF
           ELSE
             DF1=EXP(PIA*0.5D0)*SQRT((1.D0-DEE)/PIA2)
           ENDIF
           PSER=K/DF1
           PSERD=KP*2.D0/X/DF1
         ELSE
           IF (X.LT.A) THEN
             IF (-PIA2.LE.LOG(UNDER)) THEN
               DEE=0.D0
             ELSE
               DEE=EXP(-PIA2)
             ENDIF
             IF (A.LT.1.D-1) THEN
               IF (A.LT.UNDER) THEN
                 DF1=1.D0
               ELSE
                 L=0
                 DDS=1.D0
                 DSMALL=1.D0             
 48              L=L+1
                 DDS=-DDS*PIA2/(L+1.D0)
                 DSMALL=DSMALL+DDS
                 IF (ABS(DDS/DSMALL).GT.PRECI) GOTO 48
                 DF1=SQRT(DSMALL)
               ENDIF
             ELSE
               DF1=SQRT((1.D0-DEE)/PIA2)
             ENDIF
           ELSE
             SINTH=A/X
             THET=ASIN(SINTH)
             COSTH=COS(THET)
             FDOMIN=X*(COSTH+THET*SINTH)
             IF (-PIA2.LE.LOG(UNDER)) THEN
               DEE=0.D0
             ELSE
               DEE=EXP(-PIA2)
             ENDIF
             IF (A.LT.1.D-1) THEN
               IF (A.LT.UNDER) THEN
                 DF1=1.D0
               ELSE
                 L=0
                 DDS=1.D0
                 DSMALL=1.D0             
 49              L=L+1
                 DDS=-DDS*PIA2/(L+1.D0)
                 DSMALL=DSMALL+DDS
                 IF (ABS(DDS/DSMALL).GT.PRECI) GOTO 49 
                 DF1=EXP(PIA*0.5D0-FDOMIN)*SQRT(DSMALL)
               ENDIF
             ELSE
               DF1=EXP(PIA*0.5D0-FDOMIN)*SQRT((1.D0-DEE)/PIA2)
             ENDIF
           ENDIF
           PSER=K/DF1
           PSERD=KP*2.D0/X/DF1
         ENDIF
       ELSE
         PSER=0.D0
         PSERD=0.D0
       ENDIF
       RETURN
       END           

       SUBROUTINE AIEXKI(IFAC,X,A,DKAI,DKAID,IERROK)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC AIRY-TYPE ASYMPTOTIC EXPANSION FOR THE K AND K'      C 
CCC FUNCTIONS                                            C
CCC                                                      C
CCC   INPUT VARIABLES:                                   C
CCC      X:   ARGUMENT OF THE FUNCTIONS                  C
CCC      A:   ORDER OF THE FUNCTIONS                     C
CCC      IFAC:                                           C
CCC               =1,  NON SCALED FUNCTIONS              C 
CCC               OTHERWISE,  SCALED FUNCTIONS           C
CCC   OUTPUT VARIABLES:                                  C
CCC      DKAI: K FUNCTION                                C
CCC      DKAID: DERIVATIVE OF THE K FUNCTION             C
CCC      IERROK: ERROR FLAG                              C
CCC      * IF IERROK=0, COMPUTATION SUCCESSFUL.          C
CCC      * IF IERROK=1, COMPUTATION OUT OF RANGE.        C
CCC      * IF IERROK=2, ARGUMENT AND/OR ORDER,           C
CCC                     OUT OF RANGE.                    C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC           LOCAL VARIABLES:                           C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A0EX    : EXACT VALUE OF THE COEFFICIENT A_0 
C A13     : A**(1/3)
C A2      : A**2
C A23     : A**(2/3)
C A2K     : A**(2*K) 
C AC      : COEFFICIENTS A_S(PSI) USED IN THE EXPANSIONS
C AII     : IMAGINARY PART OF THE AIRY FUNCTION AI(Z)
C AIR     : REAL PART OF THE AIRY FUNCTION AI(Z)
C APIHAL  : A*PI/2
C ARG     : -A**(2/3)*PSI
C AS      : ACCUMULATES THE CONTRIBUTION OF THE AC COEFFICIENTS
C           (FOR THE KIA(X) FUNCTION)
C ASP     : ACCUMULATES THE CONTRIBUTION OF THE AC COEFFICIENTS
C           (FOR THE KIA'(X) FUNCTION)
C B0EX    : EXACT VALUE OF THE COEFFICIENT B_0
C B0PEX   : EXACT VALUE OF THE COEFFICIENT B'_0
C BC      : COEFFICIENTS B_S(PSI) USED IN THE EXPANSIONS
C BS      : ACCUMULATES THE CONTRIBUTION OF THE BC COEFFICIENTS
C           (FOR THE KIA(X) FUNCTION)
C BSO     : ACCUMULATES THE OLD VALUES OF BS
C BSP     : ACCUMULATES THE CONTRIBUTION OF THE BC COEFFICIENTS
C           (FOR THE KIA'(X) FUNCTION)
C BSPO    : ACCUMULATES THE OLD VALUES OF BSP
C C0EX    : EXACT VALUE OF THE COEFFICIENT C_0
C CHI     : ACCUMULATES THE CONTRIBUTION OF THE CHIN COEFFICIENTS
C CHIEX   : EXACT VALUE OF THE FUNCTION CHI(PSI)
C CHIN    : COEFFICIENTS FOR THE EXPANSION OF THE FUNCTION 
C           CHI(PSI)
C COSTH   : COS(THET)
C D0EX    : EXACT VALUE OF THE COEFFICIENT D_0
C DAII    : IMAGINARY PART OF THE AIRY FUNCTION AI'(Z)
C DAIR    : REAL PART OF THE AIRY FUNCTION AI'(Z)
C DF      : 2**(1/3)
C DZZ     : (ABS(1-Z**2))**(1/2)
C ETA     : PSI/2**(1/3)
C ETAJ    : ETA**J
C ETAK    : ETA**K
C ETAL    : ETA**L
C EXPAM   : EXP(A*PI/2-FDOMIN)
C EXPAPI  : EXP(A*PI/2)
C F2      : (-)**K/A**(2*K)
C F4      : (A**(1/3))**4
C FAC     : FACTOR FOR THE KIA(X) FUNCTION
C FACD    : FACTOR FOR THE KIA'(X) FUNCTION
C FDOMIN  : X*(COS(THET)+THET*SIN(THET))
C IERRO   : ERROR FLAG FOR THE AIRY FUNCTIONS          
C IFACA   : 
C           *IF IFACA=1, COMPUTATION OF UNSCALED AIRY AI(Z),AI'(Z)
C           *IF IFACA=2, COMPUTATION OF SCALED AIRY AI(Z),AI'(Z) 
C IFUN    : 
C           *IF IFUN=1, COMPUTATION OF AIRY AI(Z)
C           *IF IFUN=2, COMPUTATION OF AIRY AI'(Z) 
C PHI     : COEFFICIENTS FOR THE EXPANSION OF THE FUNCTION 
C           PHI(PSI)
C PHIEX   : EXACT VALUE OF THE FUNCTION PHI(PSI)
C PHIEX2  : PHI(PSI)**2
C PHIS    : VALUE OF THE FUNCTION PHI(PSI)
C PI      : 3.1415...
C PIHALF  : PI/2
C PSI     : 
C          *IF 0<=Z<=1, 2/3*PSI**3/2=LOG((1+SQRT(1-Z**2))/Z)
C                       -SQRT(1-Z**2)
C          *IF Z>=1, 2/3*(-PSI)**3/2=SQRT(Z**2-1)-ARCCOS(1/Z)
C PSI12   : SQRT(PSI)
C PSI2    : PSI*PSI
C PSI3    : PSI**3
C SAS     : ACCUMULATES THE CONTRIBUTION OF A_S(PSI)
C SBS     : ACCUMULATES THE CONTRIBUTION OF B_S(PSI)
C SCS     : ACCUMULATES THE CONTRIBUTION OF C_S(PSI)
C SDS     : ACCUMULATES THE CONTRIBUTION OF D_S(PSI)
C SIG     : (-)**K
C SINTH   : SIN(THET)
C THET    : ASIN(A/X)
C UNDER   : UNDERFLOW NUMBER
C Y       : Z-1
C Z       : X/A
C Z2      : Z**2
C Z21M    : 1-Z**2
C ZDS     : SQRT(1-Z**2)
C ZMASF   : EXPANSION IN TERMS OF (Z-1) FOR THE
C           CALCULATION OF PSI(Z)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION A,A0EX,A13,A2,A23,A2K,AC(0:5,0:20),
     + AII,AIR,APIHAL,ARG,AS,ASP,B0EX,B0PEX,BC(0:5,0:20),
     + BS,BSO,BSP,BSPO,C0EX,CHI,CHIEX,CHIN(0:26),COSTH,
     + COZMAS(0:12),D0EX,D1MACH,DAII,DAIR,DF,DKAI,DKAID
       DOUBLE PRECISION DZZ,ETA,ETAJ,ETAK,ETAL,EXPAM,
     + EXPAPI,F2,F4,FAC,FACD,FDOMIN,PHI(0:35),PHIEX,PHIEX2,
     + PHIS,PI,PIHALF,PSI,PSI12,PSI2,PSI3,SAS,SBS,SCS,SDS,
     + SIG,SINTH,THET,UNDER,X,Y,Z,Z2,Z21M,ZDS,ZMASF
       INTEGER IERRO,IERROK,IFAC,IFACA,IFUN,INDA(0:5),INDB(0:5),
     + J,K,L
       SAVE PHI,CHIN,AC,BC
CCCC VALUES OF THE COEFFICIENTS  
       DATA PHI/1.D0,0.2D0,.25714285714285714286D-1,
     + -.56507936507936507937D-2,-.39367965367965367965D-2,
     + -.5209362066504924D-3,.3708541264731741D-3,
     + .2123827840293627D-3,.2150629788753145D-4,   
     + -.2636904062981799D-4,-.1405469826493129D-4,   
     + -.1149328899029441D-5,.1972641193938624D-5,   
     + .1014324305593329D-5,.7034331100192200D-7,   
     + -.1525044777392676D-6,-.7677866256900572D-7,   
     + -.4669842638693018D-8,.1206673645965329D-7,   
     + .5990877668092344D-8,.3269102150077715D-9,  
     + -.97138350244428335095D-9,-.47745934295232233834D-9, 
     + -.23750318642839155779D-10,.79244598109106655567D-10,    
     + .38653584230817865528D-10,.17734105846426807873D-11,    
     + -.65332110030864751956D-11,-.31673512094772575686D-11,    
     + -.13524195177121030660D-12,.54324103217903338951D-12,    
     + .26204918647967626464D-12,.10488134973664584898D-13,    
     + -.45490420121539001435D-13,-.21851238232690420878D-13,    
     + -.82456080260379042800D-15/
       DATA CHIN/.2D0,.1142857142857142857142857D-1,
     + -.2438095238095238095238095D-1,-.1003471449185734900020614D-1,
     + .8811404468547325690182833D-3,.2318339655809043564145605D-2,
     + .7794494413564441575646057D-3,-.1373952504077228744949558D-3,
     + -.2162301322540308393022684D-3,-.6585004634375583559042795D-4,
     + .1502851367097217578058824D-4,.1991904617871647675455262D-4,
     + .5731972706719818525615427D-5,-.1496427612747891044606885D-5,
     + -.1821231830428939670133992D-5,-.5054254875930882534538217D-6,
     + .1433283859497625931203415D-6,.1657681319078678321113361D-6,
     + .4485592642702540575627044D-7,-.1346138242826094098161839D-7,
     + -.1504601862773535117708677D-7,-.3995660198654805921651406D-8,
     + .1250124931952495738882300D-8,.1363187174221864073749532D-8,
     + .3567608459777506132029204D-9,-.1152749290139859167119863D-9,
     + -.1233547289799408517691696D-9/
       DATA COZMAS/.9428090415820634D0,-.4242640687119285D0,
     + .2904188565587606D0,-.2234261009999160D0,
     + .1821754153944745D0,-.1539625154198624D0,
     + .1333737583085222D0,-.1176617834148007D0,
     + .1052687194772381D0,-.9524025714638822D-1,
     + .8695738197073783D-1,-.8000034897653656D-1,
     + .7407421797273086D-1/
       DATA AC(0,0)/1.D0/
       DATA AC(1,0)/-.44444444444444444445D-2/
       DATA AC(1,1)/-.18441558441558441558D-2/
       DATA AC(1,2)/.11213675213675213675D-2/
       DATA AC(1,3)/.13457752124418791086D-2/
       DATA AC(1,4)/.0003880626562979504D0/
       DATA AC(1,5)/-.0001830686723781799D0/
       DATA AC(1,6)/-.0001995460887806733D0/
       DATA AC(1,7)/-.00005256191234041587D0/
       DATA AC(1,8)/.00002460619652459158D0/
       DATA AC(1,9)/.00002519246780924541D0/
       DATA AC(1,10)/.6333157376533242D-5/
       DATA AC(1,11)/-.2957485733830202D-5/
       DATA AC(1,12)/-.2925255920564838D-5/
       DATA AC(1,13)/-.7159702610502009D-6/
       DATA AC(1,14)/.3331510720390949D-6/
       DATA AC(1,15)/.3227670475692310D-6/
       DATA AC(1,16)/.7767729381664199D-7/
       DATA AC(1,17)/-.3600954237921120D-7/
       DATA AC(1,18)/-.3441724449034226D-7/
       DATA AC(1,19)/-.8188194356398772D-8/
       DATA AC(1,20)/.3783148485152038D-8/ 
       DATA AC(2,0)/.69373554135458897365D-3/
       DATA AC(2,1)/.46448349036584330703D-3/
       DATA AC(2,2)/-.42838130171535112460D-3/
       DATA AC(2,3)/-.0007026702868771135D0/
       DATA AC(2,4)/-.0002632580046778811D0/
       DATA AC(2,5)/.0001663853666288703D0/
       DATA AC(2,6)/.0002212087687818584D0/
       DATA AC(2,7)/.00007020345615329662D0/
       DATA AC(2,8)/-.00004000421782540614D0/
       DATA AC(2,9)/-.00004786324966453962D0/
       DATA AC(2,10)/-.00001394600741473631D0/
       DATA AC(2,11)/.7536186591273727D-5/
       DATA AC(2,12)/.8478502161067667D-5/
       DATA AC(2,13)/.2345355228453912D-5/
       DATA AC(2,14)/-.1225943294710883D-5/
       DATA AC(2,15)/-.1325082343401027D-5/
       DATA AC(2,16)/-.3539954776569997D-6/
       DATA AC(2,17)/.1808291719376674D-6/
       DATA AC(2,18)/.1900383515233655D-6/
       DATA AC(3,0)/-.35421197145774384076D-3/
       DATA AC(3,1)/-.31232252789031883276D-3/
       DATA AC(3,2)/.3716442237502298D-3/
       DATA AC(3,3)/.0007539269155977733D0/
       DATA AC(3,4)/.0003408300059444739D0/
       DATA AC(3,5)/-.0002634968172069594D0/
       DATA AC(3,6)/-.0004089275726648432D0/
       DATA AC(3,7)/-.0001501108759563460D0/
       DATA AC(3,8)/.00009964015205538056D0/
       DATA AC(3,9)/.0001352492955751283D0/
       DATA AC(3,10)/.00004443117087272903D0/
       DATA AC(3,11)/-.00002713205071914117D0/
       DATA AC(3,12)/-.00003396796969771860D0/
       DATA AC(3,13)/-.00001040708865273043D0/
       DATA AC(3,14)/.6024639065414414D-5/
       DATA AC(3,15)/.7143919607846883D-5/
       DATA AC(4,0)/.378194199201773D-3/
       DATA AC(4,1)/.000404943905523634D0/
       DATA AC(4,2)/-.000579130526946453D0/
       DATA AC(4,3)/-.00138017901171011D0/
       DATA AC(4,4)/-.000722520056780091D0/
       DATA AC(4,5)/.000651265924036825D0/
       DATA AC(4,6)/.00114674563328389D0/
       DATA AC(4,7)/.000474423189340405D0/
       DATA AC(4,8)/-.000356495172735468D0/
       DATA AC(4,9)/-.000538157791035111D0/
       DATA AC(4,10)/-.000195687390661225D0/
       DATA AC(4,11)/.000132563525210293D0/
       DATA AC(4,12)/.000181949256267291D0/
       DATA AC(5,0)/-.69114139728829416760D-3/
       DATA AC(5,1)/-.00085995326611774383285D0/
       DATA AC(5,2)/.0014202335568143511489D0/
       DATA AC(5,3)/.0038535426995603052443D0/
       DATA AC(5,4)/.0022752811642901374595D0/
       DATA AC(5,5)/-.0023219572034556988366D0/
       DATA AC(5,6)/-.0045478643394434635622D0/
       DATA AC(5,7)/-.0020824431758272449919D0/
       DATA AC(5,8)/.0017370443573195808719D0/
       DATA BC(0,0)/.14285714285714285714D-1/
       DATA BC(0,1)/.88888888888888888889D-2/
       DATA BC(0,2)/.20482374768089053803D-2/
       DATA BC(0,3)/-.57826617826617826618D-3/
       DATA BC(0,4)/-.60412089799844901886D-3/
       DATA BC(0,5)/-.0001472685745626922D0/
       DATA BC(0,6)/.00005324102148009784D0/
       DATA BC(0,7)/.00005206561006583416D0/
       DATA BC(0,8)/.00001233115050894939D0/                                
       DATA BC(0,9)/-.4905932728531366D-5/                                 
       DATA BC(0,10)/-.4632230987136350D-5/  
       DATA BC(0,11)/-.1077174523455235D-5/      
       DATA BC(0,12)/.4475963978932822D-6/                         
       DATA BC(0,13)/.4152586188464624D-6/         
       DATA BC(0,14)/.9555819293589234D-7/
       DATA BC(0,15)/-.4060599208403059D-7/                               
       DATA BC(0,16)/-.3731367187988482D-7/                             
       DATA BC(0,17)/-.8532670645553778D-8/                         
       DATA BC(0,18)/.3673017245573624D-8/                 
       DATA BC(0,19)/.3355960460784536D-8/                           
       DATA BC(0,20)/.7643107095110475D-9/
       DATA BC(1,0)/-.11848595848595848596D-2/
       DATA BC(1,1)/-.13940630797773654917D-2/
       DATA BC(1,2)/-.48141005586383737645D-3/
       DATA BC(1,3)/.26841705366016142958D-3/
       DATA BC(1,4)/.0003419706982709903D0/
       DATA BC(1,5)/.0001034548234902078D0/
       DATA BC(1,6)/-.00005418191982095504D0/
       DATA BC(1,7)/-.00006202184830690167D0/
       DATA BC(1,8)/-.00001724885886056087D0/
       DATA BC(1,9)/.8744675992887053D-5/
       DATA BC(1,10)/.9420684216180929D-5/
       DATA BC(1,11)/.2494922112085850D-5/
       DATA BC(1,12)/-.1238458608836357D-5/
       DATA BC(1,13)/-.1285461713809769D-5/
       DATA BC(1,14)/-.3299710862537507D-6/
       DATA BC(1,15)/.1613441105788315D-6/
       DATA BC(1,16)/.1633623194402374D-6/
       DATA BC(1,17)/.4104252949605779D-7/
       DATA BC(1,18)/-.1984317042326989D-7/
       DATA BC(1,19)/-.1973948142769706D-7/
       DATA BC(1,20)/-.4882194808588752D-8/
       DATA BC(2,0)/.43829180944898810994D-3/
       DATA BC(2,1)/.71104865116708668943D-3/
       DATA BC(2,2)/.31858383945387580576D-3/
       DATA BC(2,3)/-.0002404809426804458D0/
       DATA BC(2,4)/-.0003722966038621536D0/
       DATA BC(2,5)/-.0001352752059595618D0/
       DATA BC(2,6)/.00008691694372704142D0/
       DATA BC(2,7)/.0001158750753591377D0/
       DATA BC(2,8)/.00003724965927846447D0/
       DATA BC(2,9)/-.00002198334949606935D0/
       DATA BC(2,10)/-.00002686449633870452D0/
       DATA BC(2,11)/-.8023061612032524D-5/
       DATA BC(2,12)/.4494756592180126D-5/
       DATA BC(2,13)/.5193504763856015D-5/
       DATA BC(2,14)/.1477156191529617D-5/
       DATA BC(2,15)/-.7988793826096784D-6/
       DATA BC(3,0)/-.37670439477105454219D-3/
       DATA BC(3,1)/-.75856271658798642365D-3/
       DATA BC(3,2)/-.0004103253968775048D0/
       DATA BC(3,3)/.0003791263310429010D0/
       DATA BC(3,4)/.0006850981673903450D0/
       DATA BC(3,5)/.0002878310571932216D0/
       DATA BC(3,6)/-.0002157010636115705D0/
       DATA BC(3,7)/-.0003260863991373500D0/
       DATA BC(3,8)/-.0001181317008748678D0/
       DATA BC(3,9)/.00007887526841582582D0/
       DATA BC(3,10)/.0001072081833420685D0/
       DATA BC(3,11)/.00003544595251288735D0/
       DATA BC(3,12)/-.00002201447920733824D0/
       DATA BC(3,13)/-.00002789336359620813D0/
       DATA BC(4,0)/.00058453330122076187255D0/
       DATA BC(4,1)/.0013854690422372401251D0/
       DATA BC(4,2)/.00086830374184946900245D0/
       DATA BC(4,3)/-.00093502904801345951693D0/
       DATA BC(4,4)/-.0019175486005525492059D0/
       DATA BC(4,5)/-.00090795047113308137941D0/
       DATA BC(4,6)/.00077050429806392235104D0/
       DATA BC(4,7)/.0012953100128255983488D0/
       DATA BC(4,8)/.00051933869471899550762D0/
       DATA BC(4,9)/-.00038482631948759834653D0/
       DATA BC(4,10)/-.00057335393099012476502D0/
       DATA BC(5,0)/-.0014301070053470410656D0/
       DATA BC(5,1)/-.0038637811942002539408D0/
       DATA BC(5,2)/-.0027322816261168328245D0/
       DATA BC(5,3)/.0033294980346743452748D0/
       DATA BC(5,4)/.0075972237660887795911D0/
       DATA BC(5,5)/.0039816655673062060620D0/
       DATA BC(5,6)/-.0037510180460986006595D0/
       DATA INDA/0,20,18,15,12,8/
       DATA INDB/20,20,15,13,10,6/ 
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
CCCC CONSTANTS CCCCCCCCCCCCCC
       PI=ACOS(-1.D0)
       PIHALF=PI*0.5D0
       IERROK=0
       IF (IFAC.EQ.1) THEN
         IF (X.GE.A) THEN
           SINTH=A/X
           THET=ASIN(SINTH)
           COSTH=COS(THET)
           FDOMIN=X*(COSTH+THET*SINTH)
           IF (-FDOMIN.LE.LOG(UNDER)) IERROK=1
         ELSE        
           IF ((-PI*A*0.5D0).LE.LOG(UNDER)) IERROK=1  
         ENDIF 
       ENDIF
       IF (IERROK.EQ.0) THEN
         DF=2.D0**(1.D0/3.D0)
CCCC VARIABLES CCCCCCCCCCCCCCC
         Z=X/A
         A2=A*A
         A13=A**(1.D0/3.D0)
         A23=A13*A13
         IF (IFAC.EQ.1) THEN
           APIHAL=A*PIHALF 
           EXPAPI=EXP(-APIHAL)
           FAC=PI*EXPAPI/A13
           FACD=2.D0*PI*EXPAPI/Z/A23
         ELSE
           IF (X.LT.A) THEN
             FAC=PI/A13
             FACD=2.D0*PI/Z/A23
           ELSE
             SINTH=A/X
             THET=ASIN(SINTH)
             COSTH=COS(THET)
             FDOMIN=X*(COSTH+THET*SINTH)
             EXPAM=EXP(-A*PIHALF+FDOMIN)
             FAC=PI*EXPAM/A13
             FACD=2.D0*PI*EXPAM/Z/A23
           ENDIF
         ENDIF
         F4=A13**4
         IF (Z.LE.0.9D0) THEN
           ZDS=SQRT((1.D0-Z)*(1.D0+Z))
           PSI=(1.5D0*(LOG((1.D0+ZDS)/Z)-ZDS))**(2.D0/3.D0)
         ELSEIF (Z.GT.1.1D0) THEN
           ZDS=SQRT((Z-1.D0)*(1.D0+Z))
           PSI=-(1.5D0*(ZDS-ACOS(1.D0/Z)))**(2.D0/3.D0)
         ELSE
           Y=Z-1.D0
           ZMASF=COZMAS(12)
           DO 8 K=0,11 
             J=11-K
             ZMASF=COZMAS(J)+Y*ZMASF
 8         CONTINUE
           ZMASF=ABS(Y)**(1.5D0)*ZMASF
           IF (Z.LT.1.D0) THEN
             PSI=(1.5D0*ZMASF)**(2.D0/3.D0)
           ELSE
             PSI=-(1.5D0*ZMASF)**(2.D0/3.D0)
           ENDIF
         ENDIF
         ETA=PSI/DF
         ARG=-A23*PSI
         PSI2=PSI*PSI
         PSI3=PSI2*PSI
         IF ((Z.GT.0.8D0).AND.(Z.LT.1.2D0)) THEN
           PHIS=0.D0
           CHI=0.D0
           SAS=0.D0
           SBS=0.D0
           SDS=0.D0
           SCS=1.D0
           BS=0.D0
           BSPO=0.D0
           DO 41 L=0,20
             IF (L.EQ.0) THEN
               ETAL=1.D0
             ELSE
               ETAL=ETAL*ETA
             ENDIF
             CHI=CHI+CHIN(L)*ETAL
 41        CONTINUE      
           CHI=CHI/DF 
           DO 10 K=0,20
             BSO=BS
             BSPO=BSP
             AS=0.D0
             BS=0.D0
             ASP=0.D0
             BSP=0.D0
             IF (K.EQ.0) THEN
               ETAK=1.D0
               A2K=1.D0
               SIG=1.D0
             ELSE
               ETAK=ETAK*ETA
               A2K=A2K*A2
               SIG=-1.D0*SIG
             ENDIF
             PHIS=PHIS+PHI(K)*ETAK    
             F2=SIG/A2K       
             IF (K.LE.5) THEN 
               DO 20 J=0,20
                 IF (J.EQ.0) THEN
                   ETAJ=1.D0
                 ELSE
                   ETAJ=ETAJ*ETA
                 ENDIF  
                 IF (J.LE.INDA(K)) THEN
                   AS=AS+AC(K,J)*ETAJ
                 ENDIF
                 IF (J.LE.INDB(K)) THEN
                   BS=BS+BC(K,J)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDA(K)) THEN
                   ASP=ASP+(J+1)*AC(K,J+1)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDB(K)) THEN
                   BSP=BSP+(J+1)*BC(K,J+1)*ETAJ
                 ENDIF
 20            CONTINUE
               ASP=1.D0/DF*ASP
               BS=BS*DF
               SAS=SAS+AS*F2
               SBS=SBS+BS*F2/DF
               SDS=SDS-(CHI*AS+ASP+PSI*BS)*F2
             ENDIF
             IF ((K.GT.0).AND.(K.LE.6)) THEN
               SCS=SCS+(AS+CHI*BSO+BSPO)*F2
             ENDIF
 10        CONTINUE    
           PHIS=DF*PHIS
           SBS=DF*SBS
         ELSE
CCCC EXACT VALUES CCCCCCCCCCCCCCCCCCCCC  
           Z2=Z*Z
           Z21M=1.D0-Z2       
           PHIEX=(4.D0*PSI/Z21M)**0.25D0
           PHIEX2=PHIEX*PHIEX
           A0EX=1.D0
           B0EX=-5.D0/48.D0/(PSI*PSI)+PHIEX2/48.D0/PSI*
     +    (5.D0/Z21M-3.D0)
           CHIEX=0.25D0/PSI*(1.D0-Z2*PHIEX2**3*0.25D0)
           CHI=CHIEX
           D0EX=-(7.D0/48.D0/PSI+PHIEX2/48.D0*
     +     (9.D0-7.D0/Z21M))
           IF (PSI.GT.0.D0) THEN
             PSI12=SQRT(PSI)
             DZZ=SQRT(Z21M)
           ELSE
             PSI12=SQRT(-PSI)
             DZZ=SQRT(ABS(Z21M))
           ENDIF
           B0PEX=5.D0/24.D0/PSI3+PHIEX2/48.D0*((2.D0*CHI*PSI-1.D0)/
     +       PSI2*(5.D0/Z21M-3.D0)-10.D0*Z2*PSI12/
     +       Z21M**2/DZZ/PSI)
           C0EX=1.D0
           SAS=A0EX
           SBS=B0EX
           SCS=C0EX
           SDS=D0EX
           BS=0.D0
           BSP=0.D0
           A2K=1.D0
           SIG=1.D0
           DO 30 K=1,6
             BSO=BS
             BSPO=BSP
             AS=0.D0
             BS=0.D0
             ASP=0.D0
             BSP=0.D0
             A2K=A2K*A2
             SIG=-1.D0*SIG
             F2=SIG/A2K
             IF (K.LE.5) THEN
               DO 40 J=0,20
                 IF (J.EQ.0) THEN
                   ETAJ=1.D0
                 ELSE
                   ETAJ=ETAJ*ETA
                 ENDIF 
                 IF (J.LE.INDA(K)) THEN
                   AS=AS+AC(K,J)*ETAJ
                 ENDIF
                 IF (J.LE.INDB(K)) THEN
                   BS=BS+BC(K,J)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDA(K)) THEN
                   ASP=ASP+(J+1)*AC(K,J+1)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDB(K)) THEN
                   BSP=BSP+(J+1)*BC(K,J+1)*ETAJ
                 ENDIF
 40            CONTINUE
               BS=DF*BS
               ASP=ASP/DF
               SAS=SAS+AS*F2
               SBS=SBS+BS*F2
               SDS=SDS-(CHI*AS+ASP+PSI*BS)*F2
             ENDIF
             IF (K.GE.2) THEN
               SCS=SCS+(AS+CHI*BSO+BSPO)*F2
             ELSE
               SCS=SCS+(AS+CHI*B0EX+B0PEX)*F2           
             ENDIF
 30        CONTINUE
           PHIS=PHIEX
         ENDIF    
CCCCC CALL THE AIRY ROUTINE CCCCCCCCC
         IFUN=1
         IFACA=1
         CALL AIZ(IFUN,IFACA,ARG,0.D0,AIR,AII,IERRO)
         IFUN=2
         IFACA=1
         CALL AIZ(IFUN,IFACA,ARG,0.D0,DAIR,DAII,IERRO)
         DKAI=FAC*PHIS*(AIR*SAS+DAIR*SBS/F4)
         DKAID=FACD/PHIS*(DAIR*SCS+AIR*SDS/A23)
       ELSE
         DKAI=0.D0
         DKAID=0.D0
       ENDIF
       RETURN
       END    
     
       SUBROUTINE DLIA(IFAC,X,A,DLI,DLID,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC THE PURPOUSE OF THE ROUTINE IS THE CALCULATION OF THE 
CCCC MODIFIED BESSEL FUNCTIONS L_IA(X) AND L'_IA(X), 
CCCC WHERE I IS THE IMAGINARY UNIT AND X IS THE ARGUMENT OF THE
CCCC FUNCTIONS. WE WILL REFER TO A AS THE ORDER OF THE FUNCTIONS.  
CCCC
CCCC THE ROUTINE HAS THE OPTION OF COMPUTING SCALED FUNCTIONS.
CCCC THIS SCALING CAN BE USED TO ENLARGE THE RANGE OF 
CCCC COMPUTATION.
CCCC THE SCALED FUNCTIONS ARE DEFINED AS FOLLOWS:
CCCC     (S STANDS FOR SCALED  AND 
CCCC      L=SQRT{X**2-A**2} + A*ARCSIN(A/X)):
CCCC
CCCC                EXP(-L)*L_IA(X),            IF X >=ABS(A)
CCCC    SL_IA(X)  = 
CCCC                EXP(-ABS(A)*PI/2)*L_IA(X),  IF X < ABS(A)
CCCC
CCCC
CCCC                EXP(-L)*L'_IA(X),           IF X >=ABS(A)                  
CCCC    SL'_IA(X) =  
CCCC                EXP(-ABS(A)*PI/2)*L'_IA(X), IF X <ABS(A)
CCCC
CCCC THE RANGE OF THE PARAMETERS (X,A) FOR THE COMPUTATION IS:
CCCC        0 < X <= 1500,  -1500 <= A <= 1500 
CCCC FOR FUNCTIONS WITHOUT SCALING, THE RANGE IS USUALLY LARGER 
CCCC THAN
CCCC        0 < X <= 500,  -400 <= A <= 400,
CCCC DEPENDING ON THE MACHINE OVERFLOW/UNDERFLOW PARAMETERS, WHICH
CCCC ARE SET UP BY THE ROUTINE D1MACH.
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC              METHODS OF COMPUTATION:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC      1) SERIES,  
CCCC          IF  ABS(A) > 0.044*ABS(X-3.1)**1.9+(X-3.1) OR
CCCC              ABS(A) <= 25 AND X <= 60
CCCC      2) ASYMPTOTIC EXPANSION, IF ABS(A) < 0.7*X-10
CCCC      3) AIRY-TYPE ASYMPTOTIC EXPANSION,
CCCC             IF ABS(A) < 3.7*X-10
CCCC      4) QUADRATURES,
CCCC           IN THE REST OF THE PLANE (X,A)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC        DESCRIPTION OF INPUT/OUTPUT VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC  INPUTS:
CCCC    X      : ARGUMENT OF THE FUNCTIONS 
CCC     A      : ORDER OF THE FUNCTIONS  
CCCC    IFAC:   INTEGER FLAG FOR THE SCALING
CCCC     * IFAC=1, THE CODE COMPUTES L_IA(X), L'_IA(X)
CCCC     * OTHERWISE, THE CODE COMPUTES SCALED L_IA(X), L'_IA(X)
CCCC  OUTPUTS:
CCCC    DLI    :  LIA(X) FUNCTION
CCCC    DLID   :  DERIVATIVE OF THE LIA(X) FUNCTION   
CCCC    IERRO: ERROR FLAG
CCCC     * IF IERRO=0, COMPUTATION SUCCESSFUL.
CCCC     * IF IERRO=1, COMPUTATION OUT OF RANGE.
CCCC     * IF IERRO=2, ARGUMENT X AND/OR ORDER A  OUT OF RANGE. 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCC           ACCURACY:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
CCCC THE RELATIVE ACCURACY IS: 
CCCC  BETTER THAN 10**(-13)   FOR (X,A) IN (0,200]X[-200,200]; 
CCCC  BETTER THAN 5.10**(-13) FOR (X,A) IN (0,500]X[-500,500];
CCCC  CLOSE TO 10**(-12)      FOR (X,A) IN (0,1500]X[-1500,1500].
CCCC NEAR THE ZEROS OF THE FUNCTIONS (THERE ARE INFINITELY
CCCC MANY OF THEM IN THE OSCILLATORY REGION) RELATIVE PRECISION
CCCC LOOSES MEANING AND ONLY ABSOLUTE PRECISION MAKES SENSE.
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     AUTHORS:                                               
C        AMPARO GIL    (U. CANTABRIA, SANTANDER, SPAIN). 
C                      E-MAIL: AMPARO.GIL@UNICAN.ES
C        JAVIER SEGURA (U. CANTABRIA, SANTANDER, SPAIN).
C                      E-MAIL: SEGURAJJ@UNICAN.ES
C        NICO M. TEMME (CWI, AMSTERDAM, THE NETHERLANDS).
C                      E-MAIL: NICO.TEMME@CWI.NL
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    REFERENCES:
C     THIS IS THE COMPANION SOFTWARE OF THE ARTICLES
C      1)'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL DIFFERENTIAL
C         EQUATION FOR IMAGINARY ORDERS AND POSITIVE ARGUMENTS',
C         A. GIL, J. SEGURA, N.M. TEMME
C         ACM TRANS. MATH. SOFT. (2004)
C      2)'MODIFIED BESSEL FUNCTIONS OF IMAGINARY ORDER AND
C         POSITIVE ARGUMENT',
C         A. GIL, J. SEGURA, N.M. TEMME
C         ACM TRANS. MATH. SOFT. (2004)
C    ADDITIONAL REFERENCES:   
C     - 'COMPUTATION OF THE MODIFIED BESSEL FUNCTION OF THE
C         THIRD KIND FOR IMAGINARY ORDERS' 
C         A. GIL, J. SEGURA, N.M. TEMME
C         J. COMPUT. PHYS. 175 (2002) 398-411
C     - 'COMPUTATION OF THE MODIFIED BESSEL FUNCTIONS OF THE 
C         THIRD KIND OF IMAGINARY ORDERS:
C         UNIFORM AIRY-TYPE ASYMPTOTIC EXPANSION' 
C         A. GIL, J. SEGURA, N.M. TEMME, PROCEEDINGS OPSFA 2001  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C      D:   X-3.1
C      DF1: 0.044*ABS(D)**1.9+(X-3.1) 
C      DF2: 0.7*X-10
C      DF3: 3.7*X-10 
C      PNU: ORDER OF THE FUNCTION 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION A,D,DF1,DF2,DF3,DLI,DLID,PNU,X
       INTEGER IERRO,IFAC
       IERRO=0
       PNU=A
       IF ((X.GT.1500.D0).OR.(X.LE.0.D0)) THEN
         IERRO=2
         DLI=0.D0
         DLID=0.D0
       ENDIF
       IF (ABS(PNU).GT.1500.D0) THEN
         IERRO=2
         DLI=0.D0
         DLID=0.D0
       ENDIF
       IF (IERRO.EQ.0) THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC THESE FUNCTIONS ARE EVEN FUNCTIONS IN THE  C
CCC PARAMETER A (=PNU)                         C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
         IF (PNU.LT.0.D0) PNU=-PNU
         D=X-3.1D0
         DF1=0.044D0*ABS(D)**1.9D0+D
         DF2=0.7D0*X-10.D0
         DF3=3.7D0*X-10.D0
         IF ((PNU.GT.DF1).OR.(((PNU.LE.25.D0).AND.(X.LE.60.D0)))) 
     +   THEN
           CALL SERLIA(IFAC,X,PNU,DLI,DLID,IERRO)
         ELSEIF (PNU.LT.DF2) THEN
           CALL EXPLIA(IFAC,X,PNU,DLI,DLID,IERRO)
         ELSEIF (PNU.LT.DF3) THEN
           CALL AIEXLI(IFAC,X,PNU,DLI,DLID,IERRO)
         ELSE
           CALL DLINT(IFAC,X,PNU,DLI,DLID,IERRO)  
         ENDIF
       ENDIF
       RETURN
       END

       SUBROUTINE DLINT(IFAC,XX,PNUA,DLINF,DLIND,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  CALCULATION OF L, L' USING NON-OSCILLATING INTEGRAL       C
CCC  REPRESENTATIONS                                           C
CCC                                                            C
CCC  INPUT:                                                    C
CCC      XX:   ARGUMENT OF THE FUNCTIONS                       C
CCC      PNUA: ORDER OF THE FUNCTIONS                          C
CCC      IFAC:                                                 C
CCC            =1,  NON SCALED FUNCTIONS                       C 
CCC            OTHERWISE,  SCALED FUNCTIONS                    C
CCC  OUTPUT:                                                   C
CCC      DLINF: L FUNCTION                                     C
CCC      DLIND: DERIVATIVE OF THE L FUNCTION                   C
CCC      IERRO: ERROR FLAG                                     C
CCC      * IF IERRO=0, COMPUTATION SUCCESSFUL.                 C
CCC      * IF IERRO=1, COMPUTATION OUT OF RANGE.               C
CCC      * IF IERRO=2, ARGUMENT AND/OR ORDER,  OUT OF RANGE.   C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  METHOD OF COMPUTATION:
CCC  * XX<PNUA:   THE NON-OSCILLATING INTEGRAL REPRESENTATIONS
CCC               FOR THE OSCILLATORY REGION ARE USED 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC            LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C CHI    : X*SINH(MU)-PNU*MU
C CONTR1 : CONTRIBUTION OF THE SEMI-INFINITE INTEGRAL
C          IN THE OSCILLATORY CASE (INCLUDING ADDITIONAL
C          FACTORS: CONTR1=FOS1*FACTORS).   
C COSCHI : COS(CHI)
C COSH2M : COSH(2*MU)
C COSHM  : COSH(MU)
C DF1    : FACTOR (DEPENDING ON IFAC)
C DFF    : (1-EXP(-2*PI*PNU))*EXP(-ETA) 
C DMAIN  : PI*PNU*0.5
C DMU    : SOLUTION MU OF COSH(MU)=PNU/X
C DMU2   : 2*MU
C DMU3   : 3*MU
C DMU5   : 5*MU
C DMU7   : 7*MU
C DMU9   : 9*MU
C DMUFAC : MU*COSH(MU)-SINH(MU)
C DMUTAN : MU-TANH(MU)
C EXPO   : EXP(PI*PNU*0.5)
C FOS1   : CONTRIBUTION OF THE SEMI-INFINITE INTEGRAL
C          IN THE OSCILLATORY CASE (LIA(X)).
C FOSD1  : CONTRIBUTION OF THE SEMI-INFINITE INTEGRAL
C          IN THE OSCILLATORY CASE (LIA'(X)).
C OVER   : OVERFLOW NUMBER
C PI     : 3.1415...
C PINU   : PI*PNU
C PNUA   : SAME AS PNU (INPUT VARIABLE)
C SINCHI : SIN(CHI)
C SINH2M : SINH(2*MU)
C SINHM  : SINH(MU)
C UNDER  : UNDERFLOW NUMBER
C X      : ARGUMENT OF THE FUNCTION
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION CHI,CONTR1,COSCHI,COSH2M,COSHM,
     + D1MACH,DF1,DFF,DLIND,DLINF,DMAIN,DMU,DMU2,DMU3,
     + DMU5,DMU7,DMU9,DMUFAC,DMUTAN,EXPO,FOS1,FOSD1,OVER,
     + PI,PINU,PNU,PNUA,SINCHI,SINH2M,SINHM,UNDER,X,XX
       INTEGER IERRO,IFAC
       COMMON/ARGU/X,PNU
       COMMON/PAROS1/DMU,COSHM,SINHM,DMUFAC,COSCHI,SINCHI
       COMMON/PAROS2/COSH2M,SINH2M,DMAIN
       COMMON/PAROS3/DMUTAN
CCC MACHINE DEPENDENT CONSTANT (OVERFLOW NUMBER)
       OVER=D1MACH(2)*1.D-8 
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       X=XX
       PNU=PNUA
       PI=ACOS(-1.D0)
       IERRO=0
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CC  THE USE OF INTEGRALS FOR THE LIA FUNCTION IS   C
CC  RESTRICTED TO THE CASE X < A, WHICH IS THE     C
CC  OSCILLATORY CASE                               C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       PI=ACOS(-1.D0)
       IF (IFAC.EQ.1) THEN
         IF ((PI*PNU*0.5D0).GE.LOG(OVER)) IERRO=1  
       ENDIF
       IF (IERRO.EQ.0) THEN
         COSHM=PNU/X
         DMU=LOG(COSHM+SQRT((COSHM-1.D0)*(COSHM+1.D0)))
         DMU2=2.D0*DMU
         COSH2M=COSH(DMU2)
         SINHM=SINH(DMU)
         SINH2M=SINH(DMU2)
         IF (DMU.GT.0.1D0) THEN
           CHI=X*SINHM-PNU*DMU
           DMUFAC=DMU*COSHM-SINHM
         ELSE
           DMU2=DMU*DMU
           DMU3=DMU2*DMU
           DMU5=DMU3*DMU2
           DMU7=DMU5*DMU2
           DMU9=DMU7*DMU2
           CHI=-2.D0*X*(1.D0/6.D0*DMU3+1.D0/60.D0*DMU5+
     +      3.D0/5040.D0*DMU7+4.D0/362880.D0*DMU9)
           DMUFAC=DMU3/3.D0+DMU5/30.D0+DMU7/840.D0+DMU9/45360.D0  
         ENDIF
         DMUTAN=DMU-TANH(DMU)
         COSCHI=COS(CHI)
         SINCHI=SIN(CHI)
         PINU=PI*PNU
         DMAIN=PINU*0.5D0
CCCCCCCCCCCCCCCCCC
CCC  INTEGRALS  CC
CCCCCCCCCCCCCCCCCC
         CALL TRAPRL(1,FOS1)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC THEN, THE LIA FUNCTION IS GIVEN BY ... CC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         IF (IFAC.EQ.1) THEN
           EXPO=EXP(DMAIN)
           DFF=EXPO/PI
           IF ((-2.D0*PINU).LE.LOG(UNDER)) THEN
             DF1=DFF*0.5D0
           ELSE            
             DF1=DFF*(1.D0-EXP(-2.D0*PINU))*0.5D0
           ENDIF
           CONTR1=DF1*FOS1
         ELSE
           DFF=1.D0/PI
           IF ((-2.D0*PINU).LE.LOG(UNDER)) THEN
             DF1=DFF*0.5D0
           ELSE
             DF1=DFF*(1.D0-EXP(-2.D0*PINU))*0.5D0 
           ENDIF           
           CONTR1=DF1*FOS1
         ENDIF 
         DLINF=CONTR1
CCCCCCCCCCCCCCCCCCCCCCCCCC
CCC CALCULATION OF LIA' CC
CCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCC
CCC  INTEGRALS  CC
CCCCCCCCCCCCCCCCCC
         CALL TRAPRL(10,FOSD1)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC THEN, THE LIA FUNCTION IS GIVEN BY ... CC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         IF (IFAC.EQ.1) THEN
           EXPO=EXP(DMAIN)
           DFF=EXPO/PI
           IF ((-2.D0*PINU).LE.LOG(UNDER)) THEN
             DF1=DFF*0.5D0
           ELSE
             DF1=DFF*(1.D0-EXP(-2.D0*PINU))*0.5D0
           ENDIF 
           CONTR1=DF1*FOSD1
         ELSE
           DFF=1.D0/PI
           IF ((-2.D0*PINU).LE.LOG(UNDER)) THEN
             DF1=DFF*0.5D0
           ELSE
             DF1=DFF*(1.D0-EXP(-2.D0*PINU))*0.5D0 
           ENDIF
           CONTR1=DF1*FOSD1
         ENDIF 
         DLIND=CONTR1
       ELSE
         DLINF=0.D0
         DLIND=0.D0
       ENDIF
       RETURN 
       END

       DOUBLE PRECISION FUNCTION FSTAL2(T)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  COMPUTATION OF THE INTEGRAND FOR THE 
CCC  INTEGRAL FOR THE L FUNCTION IN EQ.(37) OF 
CCC  THE REFERENCE: 
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    T    : ARGUMENT OF THE FUNCTION 
C           (VARIABLE OF INTEGRATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C ARGU    : (COSH(MU)*U-DMUFAC)/SINH(U)
C ARGU2   : ARGU**2
C COSCHI  : COSH(CHI), CHI=X*SINH(MU)-PNU*MU
C COSH2M  : COSH(2*MU)
C COSHM   : COSH(MU)
C D1      : COSH(MU)-DMUFAC
C DERI    : (COSH(MU)/SINH(U)-D1*COSH(U)/SINH(U)**2)
C           /SQRT(1-ARGU2)
C DJACO   : COSH(T)*EXP(S)/SQRT(1+EXP(S)**2)
C DMAIN   : PI*PNU*0.5
C DMU     : SOLUTION MU OF COSH(MU)=PNU/X
C DMU2    : 2*MU
C DMUFAC  : MU*COSH(MU)-SINH(MU)
C EXPON   : EXP(-(PHIB(U)-PI*PNU*0.5))
C F1      : SINH(U-MU)/(U-MU)
C G1      : Z/6+Z3/120+Z5/5040+Z7/362880, Z=2*Y
C PHIB(U) : X*COSH(U)*COS(SIGMA(U))+PNU*SIGMA(U), 
C           WHERE X=ARGUMENT OF THE FUNCTION,
C           SIGMA(U)=ARCSIN((COSH(MU)*U-DMUFAC)/SINH(U)
C RESTO   : SIN(CHI)-COS(CHI)*DERI
C S       : SINH(T)
C SINCHI  : SIN(CHI)
C SINH2M  : SINH(2*MU)
C SINHM   : SINH(MU)
C SINHU   : SINH(U)
C SINHU2  : 2*SINH(U)
C U       : MU+LOG(X+SQRT(X**2+1))
C UNDER   : UNDERFLOW NUMBER
C X       : EXP(S)
C Y       : U-MU
C Z       : 2*Y
C Z2      : Z**2
C Z3      : Z**3
C Z5      : Z**5
C Z7      : Z**7
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION ARGU,ARGU2,COSCHI,COSH2M,COSHM,
     + D1,D1MACH,DERI,DJACO,DMAIN,DMU,DMU2,DMUFAC,DMUTAN, 
     + EXPON,F1,G1,PHIB,RESTO,S,SINCHI,SINH2M,SINHM,
     + SINHU,SINHU2,T,U,UNDER,X,Y,Z,Z2,Z3,Z5,Z7
       COMMON/PAROS1/DMU,COSHM,SINHM,DMUFAC,COSCHI,SINCHI
       COMMON/PAROS2/COSH2M,SINH2M,DMAIN
       COMMON/PAROS3/DMUTAN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       S=SINH(T)
       X=EXP(S)
       U=DMUTAN+LOG(X+SQRT(X*X+1.D0))
       Y=U-DMU
       IF (ABS(Y).LE.0.1D0) THEN
         IF (ABS(Y).GT.UNDER) THEN
           F1=SINH(Y)/Y
         ELSE
           F1=1.D0
         ENDIF
         Z=Y*2.D0
         Z2=Z*Z
         Z3=Z2*Z
         Z5=Z3*Z2
         Z7=Z5*Z2
         G1=Z/6.D0+Z3/120.D0+Z5/5040.D0+Z7/362880.D0
         DMU2=2.D0*DMU
         DERI=SINH(U)/(F1-COSHM*COSH(U))*
     +      SQRT(COSH(DMU2)*F1*F1+2.D0*SINH(DMU2)*G1-
     +      COSHM*COSHM)
         DERI=1.D0/DERI 
       ELSE
         D1=COSHM*U-DMUFAC
         SINHU=SINH(U)
         ARGU=D1/SINHU
         ARGU2=ARGU*ARGU
         SINHU2=SINHU*SINHU
         DERI=1.D0/SQRT(1.D0-ARGU2)*
     +    (COSHM/SINHU-D1*COSH(U)/SINHU2)
         IF (U.LT.DMU) DERI=-DERI
       ENDIF
       DJACO=COSH(T)*X/SQRT(1.D0+X*X)
       IF ((-(PHIB(U)-DMAIN)).LE.LOG(UNDER)) THEN
         EXPON=0.D0
         FSTAL2=0.D0 
       ELSE
         EXPON=EXP(-(PHIB(U)-DMAIN))
         RESTO=(SINCHI-COSCHI*DERI)
         FSTAL2=EXPON*RESTO*DJACO
       ENDIF
       RETURN
       END

       DOUBLE PRECISION FUNCTION FDTAL2(T)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  COMPUTATION OF THE INTEGRAND FOR THE 
CCC  INTEGRAL FOR THE DERIVATIVE OF THE L FUNCTION
CCC  IN EQ.(37) OF THE REFERENCE: 
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    T    : ARGUMENT OF THE FUNCTION 
C           (VARIABLE OF INTEGRATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC         LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C ARGU    : (COSH(MU)*U-DMUFAC)/SINH(U)
C ARGU2   : ARGU**2
C COSCHI  : COSH(CHI), CHI=X*SINH(MU)-PNU*MU
C COSH2M  : COSH(2*MU)
C COSHM   : COSH(MU)
C COSHU   : COSH(U)
C COSS    : COS(SIGMA(U))
C D1      : COSH(MU)-DMUFAC
C DELTA   : -SIN(CHI)*COS(SIGMA(U))*COSH(U)
C           +COS(CHI)*SIN(SIGMA(U))*SINH(U)
C DERI    : (COSH(MU)/SINH(U)-D1*COSH(U)/SINH(U)**2)
C           /SQRT(1-ARGU2)
C DJACO   : COSH(T)*EXP(S)/SQRT(1+EXP(S)**2)
C DMAIN   : PI*PNU*0.5
C DMU     : SOLUTION MU OF COSH(MU)=PNU/X
C DMU2    : 2*MU
C DMUFAC  : MU*COSH(MU)-SINH(MU)
C EXPON   : EXP(-(PHIB(U)-PI*PNU*0.5))
C F1      : SINH(U-MU)/(U-MU)
C G1      : Z/6+Z3/120+Z5/5040+Z7/362880, Z=2*Y
C GAMMA   : SIN(CHI)*SIN(SIGMA(U))*SINH(U)+
C           COS(CHI)*COS(SIGMA(U))*COSH(U)
C PHIB(U) : X*COSH(U)*COS(SIGMA(U))+PNU*SIGMA(U), 
C           WHERE X=ARGUMENT OF THE FUNCTION,
C           SIGMA(U)=ARCSIN((COSH(MU)*U-DMUFAC)/SINH(U)
C RESTO   : -SIN(CHI)*COS(SIGMA(U))*COSH(U)
C           +COS(CHI)*SIN(SIGMA(U))*SINH(U)+
C           (SIN(CHI)*SIN(SIGMA(U))*SINH(U)+
C            COS(CHI)*COS(SIGMA(U))*COSH(U))*DERI
C S       : SINH(T)
C SIGMA(U): ASIN((COSH(MU)*U-DMUFAC)/SINH(U))  
C SIGMAU  : SIGMA(U)
C SINCHI  : SIN(CHI)
C SINH2M  : SINH(2*MU)
C SINHM   : SINH(MU)
C SINHU   : SINH(U)
C SINHU2  : 2*SINH(U)
C SINS    : SIN(SIGMA(U))
C U       : MU+LOG(X+SQRT(X**2+1))
C UNDER   : UNDERFLOW NUMBER
C X       : EXP(S)
C Y       : U-MU
C Z       : 2*Y
C Z2      : Z**2
C Z3      : Z**3
C Z5      : Z**5
C Z7      : Z**7
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION ARGU,ARGU2,COSCHI,COSH2M,COSHM,
     + COSHU,COSS,D1,D1MACH,DELTA,DERI,DJACO,DMAIN,DMU,
     + DMU2,DMUFAC,DMUTAN,EXPON,F1,G1,GAMMA,PHIB,RESTO,  
     + S,SIGMA,SIGMAU,SINCHI,SINH2M,SINHM,SINHU,SINHU2,
     + SINS,T,U,UNDER,X,Y,Z,Z2,Z3,Z5,Z7
       COMMON/PAROS1/DMU,COSHM,SINHM,DMUFAC,COSCHI,SINCHI
       COMMON/PAROS2/COSH2M,SINH2M,DMAIN
       COMMON/PAROS3/DMUTAN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8 
       S=SINH(T)
       X=EXP(S)
       U=DMUTAN+LOG(X+SQRT(X*X+1.D0))
       Y=U-DMU
       COSHU=COSH(U)
       SINHU=SINH(U)
       IF (ABS(Y).LE.0.1) THEN
         IF (ABS(Y).GT.UNDER) THEN
           F1=SINH(Y)/Y
         ELSE
           F1=1.D0
         ENDIF                 
         Z=Y*2.D0
         Z2=Z*Z
         Z3=Z2*Z
         Z5=Z3*Z2
         Z7=Z5*Z2
         G1=Z/6.D0+Z3/120.D0+Z5/5040.D0+Z7/362880.D0
         DMU2=2.D0*DMU 
         DERI=SINHU/(F1-COSHM*COSHU)*SQRT(COSH(DMU2)*F1*F1+
     +   2.D0*SINH(DMU2)*G1-COSHM*COSHM)       
         DERI=1.D0/DERI
       ELSE
         D1=COSHM*U-DMUFAC
         ARGU=D1/SINHU
         ARGU2=ARGU*ARGU
         SINHU2=SINHU*SINHU
         DERI=1.D0/SQRT(1.D0-ARGU2)*(COSHM/SINHU-
     +   D1*COSHU/SINHU2)
         IF (U.LT.DMU) DERI=-DERI 
       ENDIF
       DJACO=COSH(T)*X/SQRT(1.D0+X*X)
       IF ((-(PHIB(U)-DMAIN)).LE.LOG(UNDER)) THEN  
         EXPON=0.D0
         FDTAL2=0.D0
       ELSE
         EXPON=EXP(-(PHIB(U)-DMAIN))
         SIGMAU=SIGMA(U)
         SINS=SIN(SIGMAU)
         COSS=COS(SIGMAU)
         GAMMA=SINCHI*SINS*SINHU+COSCHI*COSS*COSHU
         DELTA=-SINCHI*COSS*COSHU+COSCHI*SINS*SINHU
         RESTO=DELTA+GAMMA*DERI
         FDTAL2=EXPON*RESTO*DJACO
       ENDIF
       RETURN
       END

      SUBROUTINE TRAPRL(IC,TI)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC IMPLEMENTATION OF AN ADAPTIVE TRAPEZOIDAL RULE
CCC FOR COMPUTING THE INTEGRAL REPRESENTATIONS OF
CCC THE FUNCTIONS.
CCC
CCC   INPUT VARIABLE:
CCC      IC: DEPENDING ON THE VALUES OF IC, 
CCC          DIFFERENT INTEGRALS ARE COMPUTED: 
CCC          *IC=1,  L FUNCTION, OSCILLATORY REGION 
CCC          *IC=10, DERIVATIVE OF THE L FUNCTION,
CCC                  OSCILLATORY REGION.
CCC   OUTPUT VARIABLE:
CCC          TI,  RESULT OF THE INTEGRAL
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC            LOCAL VARIABLES
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A        :  LOWER INTEGRATION LIMIT
C B        :  UPPER INTEGRATION LIMIT
C DELTA    :  CALCULATES THE RELATIVE PRECISION
C EPS      :  RELATIVE PRECISION PARAMETER USED IN 
C             THE CALCULATION
C H        :  INTEGRATION STEP
C PNU      :  ORDER OF THE FUNCTION 
C SUM      :  ACCUMULATES THE ELEMENTARY 
C             CONTRIBUTIONS
C TIN      :  EVALUATED INTEGRAL
C X        :  ARGUMENT OF THE FUNCTION  
C XAC      :  INTEGRATION ABCISSA
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION A,B,D1MACH,DELTA,EPS,FINTEL,
     + H,PNU,SUM,TI,TIN,X,XAC,Z
       INTEGER I,IC,IFI,N
       COMMON/ARGU/X,PNU
       EPS=D1MACH(3)
       IF (EPS.LT.1.D-14) EPS=1.D-14
       N=0
CCCCC   INTEGRATION LIMITS: A,B
       Z=X/PNU
       IF ((Z.GT.0.999D0).AND.(Z.LT.1.001D0)) THEN
         A=-4.5
       ELSE         
         A=-2.5D0
       ENDIF     
       B=-A
       H=B-A    
       TI=0.5D0*H*(FINTEL(IC,A)+FINTEL(IC,B))
       DELTA=1.D0+EPS
11     N=N+1
       H=0.5D0*H
       IF (N.EQ.1) THEN
         IFI=1
       ELSE
         IFI=2*IFI
       ENDIF
       SUM=0.D0
       DO 3 I=1,IFI
         XAC=A+DBLE(2*I-1)*H
         SUM=SUM+FINTEL(IC,XAC)
 3     CONTINUE
       TIN=0.5D0*TI+H*SUM
       IF ((TIN.NE.0.D0).AND.(N.GT.4)) THEN
         DELTA=ABS(1.D0-TI/TIN)
       ENDIF
       TI=TIN
       IF ((DELTA.GT.EPS).AND.(N.LT.9)) GOTO 11
       RETURN
       END
          
       DOUBLE PRECISION FUNCTION FINTEL(IC,T)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  AUXILIARY FUNCTION FOR THE SUBROUTINE TRAPRL.    
CCC  THIS FUNCTION CALLS THE DIFFERENT FUNCTIONS
CCC  CONTAINING THE INTEGRANDS WHICH ARE INTEGRATED
CCC  BY TRAPRL.  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   INPUT:                                      C
CCC      IC: INTEGER PARAMETER. ITS ADMISSIBLE    C
CCC          VALUES ARE THE SAME AS IN THE        C
CCC          SUBROUTINE TRAPRL.                   C  
CCC      T:  INTEGRATION ABSCISSA                 C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC       LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C FDTAL2  : OSCILLATORY PART: TAU CONTRIBUTION ROUTINE
C          (LIA'(X) FUNCTION). SEMI-INFINITE INTEGRAL.
C               USED FOR LARGE PNU
C FSTAL2  : OSCILLATORY PART: TAU CONTRIBUTION ROUTINE
C            (LIA(X) FUNCTION). SEMI-INFINITE INTEGRAL.
C                  USED FOR LARGE PNU
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION FDTAL2,FSTAL2,T
       INTEGER IC     
       IF (IC.EQ.1) THEN
         FINTEL=FSTAL2(T)
       ENDIF 
       IF (IC.EQ.10) THEN
         FINTEL=FDTAL2(T)
       ENDIF 
       RETURN
       END   
   
       SUBROUTINE SERLIA(IFAC,X,PNU,PSER,PSERD,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   CALCULATION OF POWER SERIES FOR L, L'      
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC   INPUT VARIABLES:                              C
CCC      X:   ARGUMENT OF THE FUNCTIONS             C
CCC      PNU: ORDER OF THE FUNCTIONS                C
CCC      IFAC:                                      C
CCC               =1,  NON SCALED FUNCTIONS         C 
CCC               OTHERWISE,  SCALED FUNCTIONS      C
CCC   OUTPUT VARIABLES:                             C
CCC      PSER: L FUNCTION                           C
CCC      PSERD: DERIVATIVE OF THE L FUNCTION        C
CCC      IERRO: ERROR FLAG                          C
CCC      * IF IERRO=0, COMPUTATION SUCCESSFUL.      C
CCC      * IF IERRO=1, COMPUTATION OUT OF RANGE.    C
CCC      * IF IERRO=2, ARGUMENT AND/OR ORDER,       C
CCC                    OUT OF RANGE.                C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC         LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A       : ORDER OF THE FUNCTIONS
C A2      : A**2
C A2H     : A**2/2
C A2N     : A**(2*N)
C ACCP    : ACCUMULATES THE P COEFFICIENTS
C ACCQ    : ACCUMULATES THE Q COEFFICIENTS
C ARGU    : SIG(0)-A*LOG(X/2)
C C       : X**(2*K)/K
C COCI    : 1/(K**2+A**2)
C COSTH   : COS(THET)
C DELTAK  : ACCUMULATES THE CONTRIBUTION FOR THE
C           LIA(X) FUNCTION
C DELTKP  : ACCUMULATES THE CONTRIBUTION FOR THE
C           LIA'(X) FUNCTION
C DF1     : FACTOR (DEPENDING ON IFAC)
C ETA0    : PARAMETER FOR THE CALCULATION OF THE 
C           COULOMB PHASE SHIFT
C ETA02   : ETA0**2
C F(K)    : SIN(PHI(A,K)-A*LOG(X/2))
C           /(A**2*(1+A**2)...(K**2+A**2))**1/2,
C           WHERE PHI(A,K)=PHASE(GAMMA(1+K+IA))
C FDOMIN  : X*(COS(THET)+THET*SIN(THET))  
C K       : CONTRIBUTION TO THE LIA(X) FUNCTION
C KP      : CONTRIBUTION TO THE LIA'(X) FUNCTION
C OVER    : OVERFLOW NUMBER
C P0      : PARAMETERS FOR THE CALCULATION OF THE COULOMB
C           PHASE SHIFT
C P1      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C P2      : PARAMETERS FOR THE CALCULATION OF THE COULOMB
C           PHASE SHIFT
C PI      : 3.1415...
C PIA     : PI*A
C PIA2    : 2*PI*A
C PRECI   : RELATIVE PRECISION USED IN THE CALCULATION
C Q0      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C Q1      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C Q2      : PARAMETERS FOR THE CALCULATION OF THE COULOMB 
C           PHASE SHIFT
C R(K)    : F(K)*A/TAN(PHI(A,K)-A*LOG(X/2))   
C SIG0    : COULOMB PHASE SHIFT
C SINTH   : SIN(THET)
C THET    : ASIN(A/X)
C UNDER   : UNDERFLOW NUMBER
C X2      : X*X
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC          
       DOUBLE PRECISION A,A2,A2H,A2N,ACCP,ACCQ,ARGU,C,COCI,
     + COSTH,D1MACH,DDS,DEE,DELTAK,DELTKP,DF1,DSMALL,ETA0,
     + ETA02,EULER,F(0:500),FDOMIN,K,KP,OVER,P0(0:9),P1(0:9),
     + P2(0:6),PI,PIA,PIA2,PNU,PRECI,PSER,PSERD,Q0(0:9),
     + Q1(0:9),Q2(0:6),R(0:500),SIG0,SINTH,THET,UNDER,X,X2
       INTEGER IERRO,IFAC,L,M,N
       SAVE P0,Q0,P1,Q1,P2,Q2
       DATA P0/1.08871504904797411683D5,3.64707573081160914640D5,
     +        4.88801471582878013158D5,3.36275736298197324009D5,
     +        1.26899226277838479804D5,
     +        2.60795543527084582682D4,2.73352480554497990544D3,
     +        1.26447543569902963184D2,
     +        1.85446022125533909390D0,1.90716219990037648146D-3/
       DATA Q0/6.14884786346071135090D5,2.29801588515708014282D6,
     +        3.50310844128424021934D6,
     +        2.81194990286041080264D6,1.28236441994358406742D6,
     +        3.35209348711803753154D5,
     +        4.84319580247948701171D4,3.54877039006873206531D3,
     +        1.11207201299804390166D2,1.D0/
       DATA P1/-1.044100987526487618670D10,-1.508574107180079913696D10,
     +        -5.582652833355901160542D9,4.052529174369477275446D8,
     +         5.461712273118594275192D8, 
     +         9.510404403068169395714D7,6.281126609997342119416D6,
     +         1.651178048950518520416D5, 
     +         1.498824421329341285521D3,2.974686506595477984776D0/
       DATA Q1/1.808868161493543887787D10,3.869142051704700267785D10,
     +        3.003264575147162634046D10,1.075554651494601843525D10,
     +        1.901298501823290694245D9,
     +        1.665999832151229472632D8,6.952188089169487375936D6,
     +        1.253235080625688652718D5,7.904420414560291396996D2,1.D0/
       DATA P2/7.08638611024520906826D-3,-6.54026368947801591128D-2,
     +        2.92684143106158043933D-1,4.66821392319665609167D0,
     +        -3.43943790382690949054D0,
     +        -7.72786486869252994370D0,-9.88841771200290647461D-01/
       DATA Q2/-7.08638611024520908189D-3,6.59931690706339630254D-2,
     +        -2.98754421632058618922D-1,-4.63752355513412248006D0,
     +        3.79700454098863541593D0,7.06184065426336718524D0,1.D0/
CCC MACHINE DEPENDENT CONSTANT (OVERFLOW NUMBER)
       OVER=D1MACH(2)*1.D-8
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+8
       PI=ACOS(-1.D0)
       IERRO=0
       IF (IFAC.EQ.1) THEN
         IF (X.GE.PNU) THEN
           SINTH=PNU/X
           THET=ASIN(SINTH)
           COSTH=COS(THET)
           FDOMIN=X*(COSTH+THET*SINTH)
           IF (FDOMIN.GE.LOG(OVER)) IERRO=1
         ELSE
           IF ((PI*PNU*0.5D0).GE.LOG(OVER)) IERRO=1  
         ENDIF
       ENDIF
       IF (IERRO.EQ.0) THEN
         ETA0=1.8055470716051069198764D0  
         EULER=0.577215664901532860606512D0
         PRECI=D1MACH(3)*10
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC COEFFICIENTS FOR THE CALCULATION OF THE COULOMB PHASE SHIFT
CCC FROM CODY & HILLSTROM, MATH. COMPUT. 24(111) 1970
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         A=PNU
         ETA02=ETA0*ETA0
         A2=A*A
         N=0
         ACCP=0.D0
         ACCQ=0.D0
         IF (A.LE.2.D0) THEN
 33        A2N=A2**N
           ACCP=ACCP+P0(N)*A2N
           ACCQ=ACCQ+Q0(N)*A2N
           N=N+1
           IF (N.LE.9) GOTO 33 
           SIG0=A*(A2-ETA02)*ACCP/ACCQ
         ELSE
           IF ((A.GT.2.D0).AND.(A.LE.4.D0)) THEN
 44          A2N=A2**N
             ACCP=ACCP+P1(N)*A2N
             ACCQ=ACCQ+Q1(N)*A2N
             N=N+1
             IF (N.LE.9) GOTO 44
             SIG0=A*ACCP/ACCQ
           ELSE
 55          A2N=A2**N
             ACCP=ACCP+P2(N)/A2N
             ACCQ=ACCQ+Q2(N)/A2N
             N=N+1
             IF (N.LE.6) GOTO 55
             SIG0=ATAN(A)*0.5D0+A*(LOG(1.D0+A2)*0.5D0+ACCP/ACCQ)
           ENDIF
         ENDIF 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC EVALUATION OF F(0), R(0), R(1)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
         PIA=PI*A
         A2H=A2*0.5D0      
         ARGU=SIG0-A*LOG(X*0.5D0)
         R(0)=COS(ARGU)
         R(1)=1.D0/(1.D0+A2)*(R(0)-A*SIN(ARGU))
         IF (A.LT.UNDER) THEN
           F(0)=-(EULER+LOG(X*0.5D0))
         ELSE
           F(0)=1.D0/A*SIN(ARGU)
         ENDIF
         C=1.D0
         K=R(0)                                                        
         KP=A2H*F(0)               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC RECURSION FOR F(K), R(K), C(K)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         X2=0.25D0*X*X
         M=1
         COCI=1.D0/(M*M+A2)          
         DELTAK=K*10
         DELTKP=KP*10      
 66      F(M)=(M*F(M-1)+R(M-1))*COCI
         C=X2*C/M
         DELTAK=R(M)*C
         K=K+DELTAK
         DELTKP=(M*R(M)+A2H*F(M))*C
         KP=KP+DELTKP
         M=M+1  
         COCI=1.D0/(M*M+A2)
         R(M)=((2.D0*M-1.D0)*R(M-1)-R(M-2))*COCI
         IF (M.LT.500) THEN
           IF ((ABS(DELTAK/K).GT.PRECI).OR.
     +       (ABS(DELTKP/KP).GT.PRECI)) GOTO 66
         ENDIF 
         PIA2=2.D0*PIA
         IF (IFAC.EQ.1) THEN  
           IF (-PIA2.LE.LOG(UNDER)) THEN
             DEE=0.D0
           ELSE
             DEE=EXP(-PIA2)
           ENDIF 
           IF (A.LT.1.D-1) THEN
             IF (A.LT.UNDER) THEN
               DF1=1.D0
             ELSE
               L=0
               DDS=1.D0
               DSMALL=1.D0             
 47            L=L+1
               DDS=-DDS*PIA2/(L+1.D0)
               DSMALL=DSMALL+DDS
               IF (ABS(DDS/DSMALL).GT.PRECI) GOTO 47 
               DF1=EXP(PIA*0.5D0)*SQRT(DSMALL)
             ENDIF
           ELSE
             DF1=EXP(PIA*0.5D0)*SQRT((1.D0-DEE)/PIA2)
           ENDIF
           PSER=K*DF1
           PSERD=DF1*KP*2.D0/X
         ELSE
           IF (X.LT.A) THEN
             IF (-PIA2.LE.LOG(UNDER)) THEN
               DEE=0.D0
             ELSE
               DEE=EXP(-PIA2)
             ENDIF 
             IF (A.LT.1.D-1) THEN
               IF (A.LT.UNDER) THEN
                 DF1=1.D0
               ELSE
                 L=0
                 DDS=1.D0
                 DSMALL=1.D0             
 48              L=L+1
                 DDS=-DDS*PIA2/(L+1.D0)
                 DSMALL=DSMALL+DDS
                 IF (ABS(DDS/DSMALL).GT.PRECI) GOTO 48
                 DF1=SQRT(DSMALL)
               ENDIF
             ELSE
               DF1=SQRT((1.D0-DEE)/PIA2)
             ENDIF
           ELSE
             SINTH=A/X
             THET=ASIN(SINTH)
             COSTH=COS(THET)
             FDOMIN=X*(COSTH+THET*SINTH)
             IF (-PIA2.LE.LOG(UNDER)) THEN
               DEE=0.D0
             ELSE
               DEE=EXP(-PIA2)
             ENDIF
             IF (A.LT.1.D-1) THEN
               IF (A.LT.UNDER) THEN
                 DF1=1.D0
               ELSE
                 L=0
                 DDS=1.D0
                 DSMALL=1.D0             
 49              L=L+1
                 DDS=-DDS*PIA2/(L+1.D0)
                 DSMALL=DSMALL+DDS
                 IF (ABS(DDS/DSMALL).GT.PRECI) GOTO 49 
                 DF1=EXP(PIA*0.5D0-FDOMIN)*SQRT(DSMALL)
               ENDIF
             ELSE
               DF1=EXP(PIA*0.5D0-FDOMIN)*SQRT((1.D0-DEE)/PIA2)
             ENDIF
           ENDIF
           PSER=K*DF1
           PSERD=DF1*KP*2.D0/X
         ENDIF
       ELSE
         PSER=0.D0
         PSERD=0.D0
       ENDIF
       RETURN
       END           

       SUBROUTINE EXPLIA(IFAC,X,PNU,PEXP,PEXPP,IERRO)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC CALCULATION OF THE ASYMPTOTIC EXPANSIONS FOR       C  
CCC THE L, L' FUNCTIONS                                C
CCC                                                    C
CCC   INPUT VARIABLES:                                 C
CCC      X:   ARGUMENT OF THE FUNCTIONS                C
CCC      PNU:   ORDER OF THE FUNCTIONS                 C
CCC      IFAC:                                         C
CCC               =1,  NON SCALED FUNCTIONS            C 
CCC               OTHERWISE,  SCALED FUNCTIONS         C
CCC   OUTPUT VARIABLES:                                C
CCC      PEXP: L FUNCTION                              C
CCC      PEXPP: DERIVATIVE OF THE L FUNCTION           C
CCC      IERRO: ERROR FLAG                             C
CCC      * IF IERRO=0, COMPUTATION SUCCESSFUL.         C
CCC      * IF IERRO=1, COMPUTATION OUT OF RANGE .      C
CCC      * IF IERRO=2, ARGUMENT AND/OR ORDER,          C
CCC                     OUT OF RANGE.                  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC              LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A        : ORDER OF THE FUNCTIONS
C A2       : A**2
C COSTH    : COS(THET)
C DELTAK   : ACCUMULATES THE CONTRIBUTION FOR THE
C            LIA(X) FUNCTION
C DELTKP   : ACCUMULATES THE CONTRIBUTION FOR THE
C            LIA'(X) FUNCTION
C DF       : FACTOR (DEPENDING ON IFAC)
C FDOMIN   : X*(COS(THET)+THET*SIN(THET))  
C IND      : (-1)**M
C K        : CONTRIBUTION TO THE LIA(X) FUNCTION
C KP       : CONTRIBUTION TO THE LIA'(X) FUNCTION
C OVER     : OVERFLOW NUMBER
C PI       : 3.1415...
C PIA      : PI*A
C PRECI    : RELATIVE PRECISION USED IN THE CALCULATION
C RAX(K+1) : -((K+1/2)**2+A**2)/(K+1)*RAX(K)
C SINTH    : SIN(THET)
C THET     : ASIN(PNU/X)
C XI       : 1/X
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION A,A2,COSTH,D1MACH,DELTAK,
     + DELTKP,DF,FDOMIN,K,KP,OVER,PEXP,PEXPP,PI,PIA,
     + PNU,PRECI,RAX,SINTH,THET,X,XI
       INTEGER IERRO,IFAC,IND,M
CCC MACHINE DEPENDENT CONSTANT (OVERFLOW NUMBER)
       OVER=D1MACH(2)*1.D-8
       PI=ACOS(-1.D0)
       IERRO=0
        IF (IFAC.EQ.1) THEN
         IF (X.GE.PNU) THEN
           SINTH=PNU/X
           THET=ASIN(SINTH)
           COSTH=COS(THET)
           FDOMIN=X*(COSTH+THET*SINTH)
           IF (FDOMIN.GE.LOG(OVER)) IERRO=1
         ELSE
           IF ((PI*PNU*0.5D0).GE.LOG(OVER)) IERRO=1  
         ENDIF
       ENDIF
       IF (IERRO.EQ.0) THEN
         PRECI=D1MACH(3)*10
         A=PNU
         XI=1.D0/X
         A2=A*A
         RAX=1.D0
         M=1
         DELTAK=RAX  
         K=DELTAK
         DELTKP=RAX*(0.5D0*XI-1.D0)
         KP=DELTKP 
         IND=-1
 44      RAX=-((M-0.5D0)*(1.D0-0.5D0/M)+A2/M)*0.5D0/X*RAX
         DELTAK=RAX*IND
         K=K+DELTAK
         IF (K.GE.OVER) M=2000
         M=M+1
         IND=-IND
         IF ((ABS(DELTAK/K).GT.PRECI).AND.(M.LT.1000)) GOTO 44
         RAX=1.D0
         M=1
         IND=-1
 45      RAX=-((M-0.5D0)*(1.D0-0.5D0/M)+A2/M)*0.5D0/X*RAX
         DELTAK=RAX*IND
         DELTKP=DELTAK*(XI*(0.5D0+M)-1.D0)
         KP=KP+DELTKP
         IF (KP.GE.OVER) M=2000
         M=M+1
         IND=-IND
         IF ((ABS(DELTKP/KP).GT.PRECI).AND.(M.LT.1000)) GOTO 45
         IF (IFAC.EQ.1) THEN
           DF=SQRT(0.5D0/(PI*X))*EXP(X)
           K=K*DF
           KP=-KP*DF
         ELSE        
           IF (X.LT.A) THEN
             PIA=PI*A
             DF=SQRT(0.5D0/(PI*X))*EXP(X-0.5D0*PIA)
             K=K*DF
             KP=-KP*DF
           ELSE
             SINTH=A/X
             THET=ASIN(SINTH)
             COSTH=COS(THET)
             FDOMIN=X*(COSTH+THET*SINTH)
             DF=SQRT(0.5D0/(PI*X))*EXP(X-FDOMIN)
             K=K*DF
             KP=-KP*DF
           ENDIF
         ENDIF
         PEXP=K
         PEXPP=KP
       ELSE
         PEXP=0.D0
         PEXPP=0.D0
       ENDIF
       RETURN
       END        

       SUBROUTINE AIEXLI(IFAC,X,A,DLAI,DLAID,IERROL)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC AIRY-TYPE ASYMPTOTIC EXPANSION FOR THE K AND K'   C 
CCC FUNCTIONS                                         C
CCC                                                   C
CCC   INPUT VARIABLES:                                C
CCC      X:   ARGUMENT OF THE FUNCTIONS               C
CCC      A:   ORDER OF THE FUNCTIONS                  C
CCC      IFAC:                                        C
CCC               =1,  NON SCALED FUNCTIONS           C 
CCC               OTHERWISE,  SCALED FUNCTIONS        C
CCC   OUTPUT VARIABLES:                               C
CCC      DLAI: L FUNCTION                             C
CCC      DLAID: DERIVATIVE OF THE L FUNCTION          C
CCC      IERROL: ERROR FLAG                           C
CCC      * IF IERROL=0, COMPUTATION SUCCESSFUL.       C
CCC      * IF IERROL=1, COMPUTATION OUT OF RANGE.     C
CCC      * IF IERROL=2, ARGUMENT AND/OR ORDER,        C
CCC                     OUT OF RANGE.                 C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC          LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C A0EX    : EXACT VALUE OF THE COEFFICIENT A_0 
C A13     : A**(1/3)
C A2      : A**2
C A23     : A**(2/3)
C A2K     : A**(2*K) 
C AC      : COEFFICIENTS A_S(PSI) USED IN THE EXPANSIONS
C APIHAL  : A*PI/2
C ARG     : -A**(2/3)*PSI
C AS      : ACCUMULATES THE CONTRIBUTION OF THE AC COEFFICIENTS
C           (FOR THE LIA(X) FUNCTION)
C ASP     : ACCUMULATES THE CONTRIBUTION OF THE AC COEFFICIENTS
C           (FOR THE LIA'(X) FUNCTION)
C B0EX    : EXACT VALUE OF THE COEFFICIENT B_0
C B0PEX   : EXACT VALUE OF THE COEFFICIENT B'_0
C BC      : COEFFICIENTS B_S(PSI) USED IN THE EXPANSIONS
C BII     : IMAGINARY PART OF THE AIRY FUNCTION BI(Z)
C BIR     : REAL PART OF THE AIRY FUNCTION BI(Z)
C BS      : ACCUMULATES THE CONTRIBUTION OF THE BC COEFFICIENTS
C           (FOR THE LIA(X) FUNCTION)
C BSO     : ACCUMULATES THE OLD VALUES OF BS
C BSP     : ACCUMULATES THE CONTRIBUTION OF THE BC COEFFICIENTS
C           (FOR THE LIA'(X) FUNCTION)
C BSPO    : ACCUMULATES THE OLD VALUES OF BSP
C C0EX    : EXACT VALUE OF THE COEFFICIENT C_0
C CHI     : ACCUMULATES THE CONTRIBUTION OF THE CHIN COEFFICIENTS
C CHIEX   : EXACT VALUE OF THE FUNCTION CHI(PSI)
C CHIN    : COEFFICIENTS FOR THE EXPANSION OF THE FUNCTION 
C           CHI(PSI)
C COSTH   : COS(THET)
C D0EX    : EXACT VALUE OF THE COEFFICIENT D_0
C DBII    : IMAGINARY PART OF THE AIRY FUNCTION BI'(Z)
C DBIR    : REAL PART OF THE AIRY FUNCTION BI'(Z)
C DF      : 2**(1/3)
C DZZ     : (ABS(1-Z**2))**(1/2)
C ETA     : PSI/2**(1/3)
C ETAJ    : ETA**J
C ETAK    : ETA**K
C ETAL    : ETA**L
C EXPAM   : EXP(A*PI/2-FDOMIN)
C EXPAPI  : EXP(A*PI/2)
C F2      : (-)**K/A**(2*K)
C F4      : (A**(1/3))**4
C FAC     : FACTOR FOR THE LIA(X) FUNCTION
C FACD    : FACTOR FOR THE LIA'(X) FUNCTION
C FDOMIN  : X*(COS(THET)+THET*SIN(THET))
C IERRO   : ERROR FLAG FOR THE AIRY FUNCTIONS          
C IFACA   : 
C           *IF IFACA=1, COMPUTATION OF UNSCALED AIRY BI(Z),BI'(Z)
C           *IF IFACA=2, COMPUTATION OF SCALED AIRY BI(Z),BI'(Z) 
C IFUN    : 
C           *IF IFUN=1, COMPUTATION OF AIRY BI(Z)
C           *IF IFUN=2, COMPUTATION OF AIRY BI'(Z) 
C OVER    : OVERFLOW NUMBER
C PHI     : COEFFICIENTS FOR THE EXPANSION OF THE FUNCTION 
C           PHI(PSI)
C PHIEX   : EXACT VALUE OF THE FUNCTION PHI(PSI)
C PHIEX2  : PHI(PSI)**2
C PHIS    : VALUE OF THE FUNCTION PHI(PSI)
C PI      : 3.1415...
C PIHALF  : PI/2
C PSI     : 
C          *IF 0<=Z<=1, 2/3*PSI**3/2=LOG((1+SQRT(1-Z**2))/Z)-SQRT(1-Z**2)
C          *IF Z>=1, 2/3*(-PSI)**3/2=SQRT(Z**2-1)-ARCCOS(1/Z)
C PSI12   : SQRT(PSI)
C PSI2    : PSI*PSI
C PSI3    : PSI**3
C SAS     : ACCUMULATES THE CONTRIBUTION OF A_S(PSI)
C SBS     : ACCUMULATES THE CONTRIBUTION OF B_S(PSI)
C SCS     : ACCUMULATES THE CONTRIBUTION OF C_S(PSI)
C SDS     : ACCUMULATES THE CONTRIBUTION OF D_S(PSI)
C SIG     : (-)**K
C SINTH   : SIN(THET)
C THET    : ASIN(A/X)
C Y       : Z-1
C Z       : X/A
C Z2      : Z**2
C Z21M    : 1-Z**2
C ZDS     : SQRT(1-Z**2)
C ZMASF   : EXPANSION IN TERMS OF (Z-1) FOR THE
C           CALCULATION OF PSI(Z)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
       DOUBLE PRECISION A,A0EX,A13,A2,A23,A2K,AC(0:5,0:20),
     + APIHAL,ARG,AS,ASP,B0EX,B0PEX,BC(0:5,0:20),BII,BIR,
     + BS,BSO,BSP,BSPO,C0EX,CHI,CHIEX,CHIN(0:26),COSTH,
     + COZMAS(0:12),D0EX,D1MACH,DBII,DBIR,DF,DLAI,DLAID
       DOUBLE PRECISION DZZ,ETA,ETAJ,ETAK,ETAL,EXPAM,EXPAPI,
     + F2,F4,FAC,FACD,FDOMIN,OVER,PHI(0:35),PHIEX,PHIEX2,
     + PHIS,PI,PIHALF,PSI,PSI12,PSI2,PSI3,SAS,SBS,SCS,SDS,
     + SIG,SINTH,THET,X,Y,Z,Z2,Z21M,ZDS,ZMASF
       INTEGER IERRO,IERROL,IFAC,IFACA,IFUN,INDA(0:5),INDB(0:5),
     + J,K,L
       SAVE PHI,CHIN,AC,BC
CCCC VALUES OF THE COEFFICIENTS  
       DATA PHI/1.D0,0.2D0,.25714285714285714286D-1,
     + -.56507936507936507937D-2,-.39367965367965367965D-2,
     + -.5209362066504924D-3,.3708541264731741D-3,
     + .2123827840293627D-3,.2150629788753145D-4,   
     + -.2636904062981799D-4,-.1405469826493129D-4,   
     + -.1149328899029441D-5,.1972641193938624D-5,   
     + .1014324305593329D-5,.7034331100192200D-7,   
     + -.1525044777392676D-6,-.7677866256900572D-7,   
     + -.4669842638693018D-8,.1206673645965329D-7,   
     + .5990877668092344D-8,.3269102150077715D-9,  
     + -.97138350244428335095D-9,-.47745934295232233834D-9, 
     + -.23750318642839155779D-10,.79244598109106655567D-10,    
     + .38653584230817865528D-10,.17734105846426807873D-11,    
     + -.65332110030864751956D-11,-.31673512094772575686D-11,    
     + -.13524195177121030660D-12,.54324103217903338951D-12,    
     + .26204918647967626464D-12,.10488134973664584898D-13,    
     + -.45490420121539001435D-13,-.21851238232690420878D-13,    
     + -.82456080260379042800D-15/
       DATA CHIN/.2D0,.1142857142857142857142857D-1,
     + -.2438095238095238095238095D-1,-.1003471449185734900020614D-1,
     + .8811404468547325690182833D-3,.2318339655809043564145605D-2,
     + .7794494413564441575646057D-3,-.1373952504077228744949558D-3,
     + -.2162301322540308393022684D-3,-.6585004634375583559042795D-4,
     + .1502851367097217578058824D-4,.1991904617871647675455262D-4,
     + .5731972706719818525615427D-5,-.1496427612747891044606885D-5,
     + -.1821231830428939670133992D-5,-.5054254875930882534538217D-6,
     + .1433283859497625931203415D-6,.1657681319078678321113361D-6,
     + .4485592642702540575627044D-7,-.1346138242826094098161839D-7,
     + -.1504601862773535117708677D-7,-.3995660198654805921651406D-8,
     + .1250124931952495738882300D-8,.1363187174221864073749532D-8,
     + .3567608459777506132029204D-9,-.1152749290139859167119863D-9,
     + -.1233547289799408517691696D-9/
       DATA COZMAS/.9428090415820634D0,-.4242640687119285D0,
     + .2904188565587606D0,-.2234261009999160D0,
     + .1821754153944745D0,-.1539625154198624D0,
     + .1333737583085222D0,-.1176617834148007D0,
     + .1052687194772381D0,-.9524025714638822D-1,
     + .8695738197073783D-1,-.8000034897653656D-1,
     + .7407421797273086D-1/
       DATA AC(0,0)/1.D0/
       DATA AC(1,0)/-.44444444444444444445D-2/
       DATA AC(1,1)/-.18441558441558441558D-2/
       DATA AC(1,2)/.11213675213675213675D-2/
       DATA AC(1,3)/.13457752124418791086D-2/
       DATA AC(1,4)/.0003880626562979504D0/
       DATA AC(1,5)/-.0001830686723781799D0/
       DATA AC(1,6)/-.0001995460887806733D0/
       DATA AC(1,7)/-.00005256191234041587D0/
       DATA AC(1,8)/.00002460619652459158D0/
       DATA AC(1,9)/.00002519246780924541D0/
       DATA AC(1,10)/.6333157376533242D-5/
       DATA AC(1,11)/-.2957485733830202D-5/
       DATA AC(1,12)/-.2925255920564838D-5/
       DATA AC(1,13)/-.7159702610502009D-6/
       DATA AC(1,14)/.3331510720390949D-6/
       DATA AC(1,15)/.3227670475692310D-6/
       DATA AC(1,16)/.7767729381664199D-7/
       DATA AC(1,17)/-.3600954237921120D-7/
       DATA AC(1,18)/-.3441724449034226D-7/
       DATA AC(1,19)/-.8188194356398772D-8/
       DATA AC(1,20)/.3783148485152038D-8/ 
       DATA AC(2,0)/.69373554135458897365D-3/
       DATA AC(2,1)/.46448349036584330703D-3/
       DATA AC(2,2)/-.42838130171535112460D-3/
       DATA AC(2,3)/-.0007026702868771135D0/
       DATA AC(2,4)/-.0002632580046778811D0/
       DATA AC(2,5)/.0001663853666288703D0/
       DATA AC(2,6)/.0002212087687818584D0/
       DATA AC(2,7)/.00007020345615329662D0/
       DATA AC(2,8)/-.00004000421782540614D0/
       DATA AC(2,9)/-.00004786324966453962D0/
       DATA AC(2,10)/-.00001394600741473631D0/
       DATA AC(2,11)/.7536186591273727D-5/
       DATA AC(2,12)/.8478502161067667D-5/
       DATA AC(2,13)/.2345355228453912D-5/
       DATA AC(2,14)/-.1225943294710883D-5/
       DATA AC(2,15)/-.1325082343401027D-5/
       DATA AC(2,16)/-.3539954776569997D-6/
       DATA AC(2,17)/.1808291719376674D-6/
       DATA AC(2,18)/.1900383515233655D-6/
       DATA AC(3,0)/-.35421197145774384076D-3/
       DATA AC(3,1)/-.31232252789031883276D-3/
       DATA AC(3,2)/.3716442237502298D-3/
       DATA AC(3,3)/.0007539269155977733D0/
       DATA AC(3,4)/.0003408300059444739D0/
       DATA AC(3,5)/-.0002634968172069594D0/
       DATA AC(3,6)/-.0004089275726648432D0/
       DATA AC(3,7)/-.0001501108759563460D0/
       DATA AC(3,8)/.00009964015205538056D0/
       DATA AC(3,9)/.0001352492955751283D0/
       DATA AC(3,10)/.00004443117087272903D0/
       DATA AC(3,11)/-.00002713205071914117D0/
       DATA AC(3,12)/-.00003396796969771860D0/
       DATA AC(3,13)/-.00001040708865273043D0/
       DATA AC(3,14)/.6024639065414414D-5/
       DATA AC(3,15)/.7143919607846883D-5/
       DATA AC(4,0)/.378194199201773D-3/
       DATA AC(4,1)/.000404943905523634D0/
       DATA AC(4,2)/-.000579130526946453D0/
       DATA AC(4,3)/-.00138017901171011D0/
       DATA AC(4,4)/-.000722520056780091D0/
       DATA AC(4,5)/.000651265924036825D0/
       DATA AC(4,6)/.00114674563328389D0/
       DATA AC(4,7)/.000474423189340405D0/
       DATA AC(4,8)/-.000356495172735468D0/
       DATA AC(4,9)/-.000538157791035111D0/
       DATA AC(4,10)/-.000195687390661225D0/
       DATA AC(4,11)/.000132563525210293D0/
       DATA AC(4,12)/.000181949256267291D0/
       DATA AC(5,0)/-.69114139728829416760D-3/
       DATA AC(5,1)/-.00085995326611774383285D0/
       DATA AC(5,2)/.0014202335568143511489D0/
       DATA AC(5,3)/.0038535426995603052443D0/
       DATA AC(5,4)/.0022752811642901374595D0/
       DATA AC(5,5)/-.0023219572034556988366D0/
       DATA AC(5,6)/-.0045478643394434635622D0/
       DATA AC(5,7)/-.0020824431758272449919D0/
       DATA AC(5,8)/.0017370443573195808719D0/
       DATA BC(0,0)/.14285714285714285714D-1/
       DATA BC(0,1)/.88888888888888888889D-2/
       DATA BC(0,2)/.20482374768089053803D-2/
       DATA BC(0,3)/-.57826617826617826618D-3/
       DATA BC(0,4)/-.60412089799844901886D-3/
       DATA BC(0,5)/-.0001472685745626922D0/
       DATA BC(0,6)/.00005324102148009784D0/
       DATA BC(0,7)/.00005206561006583416D0/
       DATA BC(0,8)/.00001233115050894939D0/                                
       DATA BC(0,9)/-.4905932728531366D-5/                                 
       DATA BC(0,10)/-.4632230987136350D-5/  
       DATA BC(0,11)/-.1077174523455235D-5/      
       DATA BC(0,12)/.4475963978932822D-6/                         
       DATA BC(0,13)/.4152586188464624D-6/         
       DATA BC(0,14)/.9555819293589234D-7/
       DATA BC(0,15)/-.4060599208403059D-7/                               
       DATA BC(0,16)/-.3731367187988482D-7/                             
       DATA BC(0,17)/-.8532670645553778D-8/                         
       DATA BC(0,18)/.3673017245573624D-8/                 
       DATA BC(0,19)/.3355960460784536D-8/                           
       DATA BC(0,20)/.7643107095110475D-9/
       DATA BC(1,0)/-.11848595848595848596D-2/
       DATA BC(1,1)/-.13940630797773654917D-2/
       DATA BC(1,2)/-.48141005586383737645D-3/
       DATA BC(1,3)/.26841705366016142958D-3/
       DATA BC(1,4)/.0003419706982709903D0/
       DATA BC(1,5)/.0001034548234902078D0/
       DATA BC(1,6)/-.00005418191982095504D0/
       DATA BC(1,7)/-.00006202184830690167D0/
       DATA BC(1,8)/-.00001724885886056087D0/
       DATA BC(1,9)/.8744675992887053D-5/
       DATA BC(1,10)/.9420684216180929D-5/
       DATA BC(1,11)/.2494922112085850D-5/
       DATA BC(1,12)/-.1238458608836357D-5/
       DATA BC(1,13)/-.1285461713809769D-5/
       DATA BC(1,14)/-.3299710862537507D-6/
       DATA BC(1,15)/.1613441105788315D-6/
       DATA BC(1,16)/.1633623194402374D-6/
       DATA BC(1,17)/.4104252949605779D-7/
       DATA BC(1,18)/-.1984317042326989D-7/
       DATA BC(1,19)/-.1973948142769706D-7/
       DATA BC(1,20)/-.4882194808588752D-8/
       DATA BC(2,0)/.43829180944898810994D-3/
       DATA BC(2,1)/.71104865116708668943D-3/
       DATA BC(2,2)/.31858383945387580576D-3/
       DATA BC(2,3)/-.0002404809426804458D0/
       DATA BC(2,4)/-.0003722966038621536D0/
       DATA BC(2,5)/-.0001352752059595618D0/
       DATA BC(2,6)/.00008691694372704142D0/
       DATA BC(2,7)/.0001158750753591377D0/
       DATA BC(2,8)/.00003724965927846447D0/
       DATA BC(2,9)/-.00002198334949606935D0/
       DATA BC(2,10)/-.00002686449633870452D0/
       DATA BC(2,11)/-.8023061612032524D-5/
       DATA BC(2,12)/.4494756592180126D-5/
       DATA BC(2,13)/.5193504763856015D-5/
       DATA BC(2,14)/.1477156191529617D-5/
       DATA BC(2,15)/-.7988793826096784D-6/
       DATA BC(3,0)/-.37670439477105454219D-3/
       DATA BC(3,1)/-.75856271658798642365D-3/
       DATA BC(3,2)/-.0004103253968775048D0/
       DATA BC(3,3)/.0003791263310429010D0/
       DATA BC(3,4)/.0006850981673903450D0/
       DATA BC(3,5)/.0002878310571932216D0/
       DATA BC(3,6)/-.0002157010636115705D0/
       DATA BC(3,7)/-.0003260863991373500D0/
       DATA BC(3,8)/-.0001181317008748678D0/
       DATA BC(3,9)/.00007887526841582582D0/
       DATA BC(3,10)/.0001072081833420685D0/
       DATA BC(3,11)/.00003544595251288735D0/
       DATA BC(3,12)/-.00002201447920733824D0/
       DATA BC(3,13)/-.00002789336359620813D0/
       DATA BC(4,0)/.00058453330122076187255D0/
       DATA BC(4,1)/.0013854690422372401251D0/
       DATA BC(4,2)/.00086830374184946900245D0/
       DATA BC(4,3)/-.00093502904801345951693D0/
       DATA BC(4,4)/-.0019175486005525492059D0/
       DATA BC(4,5)/-.00090795047113308137941D0/
       DATA BC(4,6)/.00077050429806392235104D0/
       DATA BC(4,7)/.0012953100128255983488D0/
       DATA BC(4,8)/.00051933869471899550762D0/
       DATA BC(4,9)/-.00038482631948759834653D0/
       DATA BC(4,10)/-.00057335393099012476502D0/
       DATA BC(5,0)/-.0014301070053470410656D0/
       DATA BC(5,1)/-.0038637811942002539408D0/
       DATA BC(5,2)/-.0027322816261168328245D0/
       DATA BC(5,3)/.0033294980346743452748D0/
       DATA BC(5,4)/.0075972237660887795911D0/
       DATA BC(5,5)/.0039816655673062060620D0/
       DATA BC(5,6)/-.0037510180460986006595D0/
       DATA INDA/0,20,18,15,12,8/
       DATA INDB/20,20,15,13,10,6/ 
CCCC CONSTANTS CCCCCCCCCCCCCC
       PI=ACOS(-1.D0)
CCC MACHINE DEPENDENT CONSTANT (OVERFLOW NUMBER)
       OVER=D1MACH(2)*1.D-8 
       IERROL=0
       IF (IFAC.EQ.1) THEN
         IF (X.GE.A) THEN
           SINTH=A/X
           THET=ASIN(SINTH)
           COSTH=COS(THET)
           FDOMIN=X*(COSTH+THET*SINTH)
           IF (FDOMIN.GE.LOG(OVER)) IERROL=1
         ELSE
           IF ((PI*A*0.5D0).GE.LOG(OVER)) IERROL=1  
         ENDIF
       ENDIF
       IF (IERROL.EQ.0) THEN
         PIHALF=PI*0.5D0
         DF=2.D0**(1.D0/3.D0)
CCCC VARIABLES CCCCCCCCCCCCCCC
         Z=X/A
         A2=A*A
         A13=A**(1.D0/3.D0)
         A23=A13*A13
         IF (IFAC.EQ.1) THEN
           APIHAL=A*PIHALF 
           EXPAPI=EXP(APIHAL)
           FAC=EXPAPI*0.5D0/A13
           FACD=EXPAPI/Z/A23
         ELSE
           IF (X.LT.A) THEN
             FAC=0.5D0/A13
             FACD=1.D0/Z/A23
           ELSE
             SINTH=A/X
             THET=ASIN(SINTH)
             COSTH=COS(THET)
             FDOMIN=X*(COSTH+THET*SINTH)
             EXPAM=EXP(A*PIHALF-FDOMIN)
             FAC=EXPAM*0.5D0/A13
             FACD=EXPAM/Z/A23
           ENDIF
         ENDIF
         F4=A13**4
         IF (Z.LE.0.9D0) THEN
           ZDS=SQRT((1.D0-Z)*(1.D0+Z))
           PSI=(1.5D0*(LOG((1.D0+ZDS)/Z)-ZDS))**(2.D0/3.D0)
         ELSEIF (Z.GT.1.1D0) THEN
           ZDS=SQRT((Z-1.D0)*(1.D0+Z))
           PSI=-(1.5D0*(ZDS-ACOS(1.D0/Z)))**(2.D0/3.D0)
         ELSE
           Y=Z-1.D0
           ZMASF=COZMAS(12)
           DO 8 K=0,11 
             J=11-K
             ZMASF=COZMAS(J)+Y*ZMASF
 8         CONTINUE
           ZMASF=ABS(Y)**(1.5D0)*ZMASF
           IF (Z.LT.1.D0) THEN
             PSI=(1.5D0*ZMASF)**(2.D0/3.D0)
           ELSE
             PSI=-(1.5D0*ZMASF)**(2.D0/3.D0)
           ENDIF
         ENDIF
         ETA=PSI/DF
         ARG=-A23*PSI
         PSI2=PSI*PSI
         PSI3=PSI2*PSI
         IF ((Z.GT.0.8D0).AND.(Z.LT.1.2D0)) THEN
           PHIS=0.D0
           CHI=0.D0
           SAS=0.D0
           SBS=0.D0
           SDS=0.D0
           SCS=1.D0
           BS=0.D0
           BSPO=0.D0
           DO 41 L=0,20
             IF (L.EQ.0) THEN
               ETAL=1.D0
             ELSE
               ETAL=ETAL*ETA
             ENDIF
             CHI=CHI+CHIN(L)*ETAL
 41        CONTINUE      
           CHI=CHI/DF 
           DO 10 K=0,20
             BSO=BS
             BSPO=BSP
             AS=0.D0
             BS=0.D0
             ASP=0.D0
             BSP=0.D0
             IF (K.EQ.0) THEN
               ETAK=1.D0
               A2K=1.D0
               SIG=1.D0
             ELSE
               ETAK=ETAK*ETA
               A2K=A2K*A2
               SIG=-1.D0*SIG
             ENDIF
             PHIS=PHIS+PHI(K)*ETAK           
             F2=SIG/A2K
             IF (K.LE.5) THEN 
               DO 20 J=0,20
                 IF (J.EQ.0) THEN
                   ETAJ=1.D0
                 ELSE
                   ETAJ=ETAJ*ETA
                 ENDIF 
                 IF (J.LE.INDA(K)) THEN
                   AS=AS+AC(K,J)*ETAJ
                 ENDIF
                 IF (J.LE.INDB(K)) THEN
                   BS=BS+BC(K,J)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDA(K)) THEN
                   ASP=ASP+(J+1)*AC(K,J+1)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDB(K)) THEN
                   BSP=BSP+(J+1)*BC(K,J+1)*ETAJ
                 ENDIF
 20            CONTINUE
               ASP=1.D0/DF*ASP
               BS=BS*DF
               SAS=SAS+AS*F2
               SBS=SBS+BS*F2/DF
               SDS=SDS-(CHI*AS+ASP+PSI*BS)*F2
             ENDIF
             IF ((K.GT.0).AND.(K.LE.6)) THEN
               SCS=SCS+(AS+CHI*BSO+BSPO)*F2
             ENDIF
 10        CONTINUE    
           PHIS=DF*PHIS
           SBS=DF*SBS
         ELSE
CCCC EXACT VALUES CCCCCCCCCCCCCCCCCCCCC  
           Z2=Z*Z
           Z21M=1.D0-Z2       
           PHIEX=(4.D0*PSI/Z21M)**0.25D0
           PHIEX2=PHIEX*PHIEX
           A0EX=1.D0
           B0EX=-5.D0/48.D0/(PSI*PSI)+PHIEX2/48.D0/PSI*
     +      (5.D0/Z21M-3.D0)
           CHIEX=0.25D0/PSI*(1.D0-Z2*PHIEX2**3*0.25D0)
           CHI=CHIEX
           D0EX=-(7.D0/48.D0/PSI+PHIEX2/48.D0*
     +      (9.D0-7.D0/Z21M))
           IF (PSI.GT.0.D0) THEN
             PSI12=SQRT(PSI)
             DZZ=SQRT(Z21M)
           ELSE
             PSI12=SQRT(-PSI)
             DZZ=SQRT(ABS(Z21M))
           ENDIF
           B0PEX=5.D0/24.D0/PSI3+PHIEX2/48.D0*((2.D0*CHI*PSI-1.D0)/
     +       PSI2*(5.D0/Z21M-3.D0)-10.D0*Z2*PSI12/
     +       Z21M**2/DZZ/PSI)
           C0EX=1.D0
           SAS=A0EX
           SBS=B0EX
           SCS=C0EX
           SDS=D0EX
           BS=0.D0
           BSP=0.D0
           A2K=1.D0
           SIG=1.D0
           DO 30 K=1,6
             BSO=BS
             BSPO=BSP
             AS=0.D0
             BS=0.D0
             ASP=0.D0
             BSP=0.D0
             A2K=A2K*A2
             SIG=-1.D0*SIG
             F2=SIG/A2K
             IF (K.LE.5) THEN
               DO 40 J=0,20
                 IF (J.EQ.0) THEN
                   ETAJ=1.D0
                 ELSE
                   ETAJ=ETAJ*ETA
                 ENDIF
                 IF (J.LE.INDA(K)) THEN
                   AS=AS+AC(K,J)*ETAJ
                 ENDIF
                 IF (J.LE.INDB(K)) THEN
                   BS=BS+BC(K,J)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDA(K)) THEN
                   ASP=ASP+(J+1)*AC(K,J+1)*ETAJ
                 ENDIF
                 IF ((J+1).LE.INDB(K)) THEN
                   BSP=BSP+(J+1)*BC(K,J+1)*ETAJ
                 ENDIF
 40            CONTINUE
               BS=DF*BS
               ASP=ASP/DF
               SAS=SAS+AS*F2
               SBS=SBS+BS*F2
               SDS=SDS-(CHI*AS+ASP+PSI*BS)*F2
             ENDIF
             IF (K.GE.2) THEN
               SCS=SCS+(AS+CHI*BSO+BSPO)*F2
             ELSE
               SCS=SCS+(AS+CHI*B0EX+B0PEX)*F2           
             ENDIF
 30        CONTINUE
           PHIS=PHIEX
         ENDIF    
CCCCC CALL THE AIRY ROUTINE CCCCCCCCC
         IFUN=1
         IFACA=1
         CALL BIZ(IFUN,IFACA,ARG,0.D0,BIR,BII,IERRO)
         IFUN=2
         IFACA=1
         CALL BIZ(IFUN,IFACA,ARG,0.D0,DBIR,DBII,IERRO)
         DLAI=FAC*PHIS*(BIR*SAS+DBIR*SBS/F4)
         DLAID=FACD/PHIS*(DBIR*SCS+BIR*SDS/A23)
       ELSE
         DLAI=0.D0
         DLAID=0.D0
       ENDIF
       RETURN
       END

 
       DOUBLE PRECISION FUNCTION V(U) 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC AUXILIARY FUNCTION:
CCC THIS FUNCTION COMPUTES THE LAST EXPRESSION
CCC IN EQ.(21) OF THE REFERENCE
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    U    : ARGUMENT OF THE FUNCTION 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC         LOCAL VARIABLES:    
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC                   
C COSTH    : COS(THET)
C FDOMIN   : X*(COS(THET)+THET*SIN(THET))
C SINTH    : SIN(THET)
C THET     : ASIN(PNU/X)
C UNDER    : UNDERFLOW NUMBER             
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION COSTH,D1MACH,FDOMIN,SINTH,
     + THET,U,UNDER
       COMMON/PARMON/THET,SINTH,COSTH,FDOMIN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+6 
       IF (ABS(U).LT.UNDER) THEN
         V=ASIN(SINTH)
       ELSE
         V=ASIN(U/SINH(U)*SINTH)
       ENDIF
       RETURN
       END

       DOUBLE PRECISION FUNCTION PHIR(U)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC AUXILIARY FUNCTION:
CCC THIS FUNCTION COMPUTES THE EXPONENT IN THE
CCC INTEGRAND IN EQ.(20) OF THE REFERENCE
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    U    : ARGUMENT OF THE FUNCTION 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC       LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C COSTH   : COS(THET)
C COSVU   : COS(V(U)) 
C FDOMIN  : X*(COS(THET)+THET*SIN(THET))
C FU1     : 2*SINH(U/2)**2
C FU2     : -2*SIN(FU3/2)*SIN(0.5*(V(U)+THET))
C FU3     : ASIN(-SIN(THET)/(COS(THET)*U/SINH(U)
C           +COS(V(U))*(SINH(U)+U)*FUAC/(SINH(U)*SINH(U)))   
C FUAC    : U**3/6+U**5/120+U**7/5040
C OVER    : OVERFLOW NUMBER
C PNU     : ORDER OF THE FUNCTION
C SINHU   : SINH(U)
C SINHUH  : SINH(U/2)
C SINTH   : SIN(THET)
C THET    : ASIN(PNU/X)
C U2      : U**2
C U3      : U**3
C U5      : U**5
C U7      : U**7
C UH      : U/2
C UNDER   : UNDERFLOW NUMBER
C V(U)    : ASIN(U/SINH(U)*SIN(THET))
C VU      : V(U)
C X       : ARGUMENT OF THE FUNCTIONS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
       DOUBLE PRECISION COSTH,COSVU,D1MACH,FDOMIN,FU1,FU2,
     + FU3,FUAC,OVER,PNU,SINHU,SINHUH,SINTH,THET,U,U2,
     + U3,U5,U7,UH,UNDER,V,VU,X
       COMMON/ARGU/X,PNU
       COMMON/PARMON/THET,SINTH,COSTH,FDOMIN
CCC MACHINE DEPENDENT CONSTANT (UNDERFLOW NUMBER)
       UNDER=D1MACH(1)*1.D+6 
CCC MACHINE DEPENDENT CONSTANT (OVERFLOW NUMBER)
       OVER=D1MACH(2)*1.D-6
       IF (U.LT.200.D0) THEN
         IF (ABS(U).LT.0.1D0) THEN
           IF (ABS(U).LT.UNDER) THEN
             PHIR=0.D0
           ELSE
             UH=U*0.5D0
             SINHUH=SINH(UH)
             FU1=2.D0*SINHUH*SINHUH
             U2=U*U
             U3=U2*U
             U5=U3*U2
             U7=U5*U2
             FUAC=U3/6.D0+U5/120.D0+U7/5040.D0
             SINHU=SINH(U)
             VU=V(U)
             COSVU=COS(VU)
             FU3=ASIN(-SINTH/(COSTH*U/SINHU+COSVU)*
     +          (SINHU+U)*FUAC/(SINHU*SINHU))   
             FU2=-2.D0*SIN(FU3*0.5D0)*SIN(0.5D0*(VU+THET))
             PHIR=X*(FU1*COSVU+FU2+SINTH*FU3)
           ENDIF
         ELSE
           VU=V(U)
           COSVU=COS(VU)
           PHIR=X*COSH(U)*COSVU+PNU*VU-FDOMIN
         ENDIF
       ELSE
         PHIR=OVER
       ENDIF
       RETURN
       END

       DOUBLE PRECISION FUNCTION SIGMA(U)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC AUXILIARY FUNCTION:
CCC THIS FUNCTION COMPUTES THE FUNCTION
CCC SIGMA FROM EQ.(31) OF THE REFERENCE
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    U    : ARGUMENT OF THE FUNCTION 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC     LOCAL VARIABLES: 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C ARGU   : (COSH(MU)*U-DMUFAC)/SINH(U)
C COSCHI : COS(CHI) 
C COSHM  : COSH(MU)
C D1     : COSH(MU)*U-DMUFAC
C DMU    : SOLUTION MU OF COSH(MU)=PNU/X
C DMUFAC : MU*COSH(MU)-SINH(MU)
C SINCHI : SIN(CHI)
C SINHM  : SINH(MU)
C SINHU  : SINH(U)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
       DOUBLE PRECISION ARGU,COSCHI,COSHM,D1,DMU,DMUFAC,
     + PI,SINCHI,SINHM,SINHU,U
       COMMON/PAROS1/DMU,COSHM,SINHM,DMUFAC,COSCHI,SINCHI
       PI=ACOS(-1.D0)
       D1=COSHM*U-DMUFAC
       SINHU=SINH(U)
       ARGU=D1/SINH(U)
       IF (ABS(ARGU).GT.1.D0) THEN
         ARGU=1.D0
       ENDIF
       SIGMA=ASIN(ARGU)
       IF (U.LT.DMU) SIGMA=PI-SIGMA
       RETURN
       END  
      
       DOUBLE PRECISION FUNCTION PHIB(U)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC THIS FUNCTION COMPUTES THE FIRST EXPRESSION 
CCC OF EQ.(30) OF THE REFERENCE
CCC  'COMPUTING SOLUTIONS OF THE MODIFIED BESSEL 
CCC   DIFFERENTIAL EQUATION FOR IMAGINARY ORDERS 
CCC   AND POSITIVE ARGUMENTS',
CCC   A. GIL, J. SEGURA, N.M. TEMME
CCC   ACM TRANS. MATH. SOFT. (2004)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC        INPUT VARIABLE:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    U    : ARGUMENT OF THE FUNCTION 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC         LOCAL VARIABLES:
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C OVER      : OVERFLOW NUMBER
C PNU       : ORDER OF THE FUNCTIONS
C SIGMA(U)  : ASIN((COSH(MU)*U-DMUFAC)/SINH(U))
C SIGMAU    : SIGMA(U)
C X         : ARGUMENT OF THE FUNCTIONS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC       
       DOUBLE PRECISION U,SIGMA,SIGMAU,OVER,D1MACH,
     + X,PNU
       COMMON/ARGU/X,PNU
CCC MACHINE DEPENDENT CONSTANT (OVERFLOW NUMBER)
       OVER=D1MACH(2)*1.D-8 
       IF (U.LT.200.D0) THEN
         SIGMAU=SIGMA(U)
         PHIB=X*COSH(U)*COS(SIGMAU)+PNU*SIGMAU
       ELSE
         PHIB=OVER
       ENDIF
       RETURN
       END
     
